<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow
                          http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

  <var name="passwordExpired" class="com.coremedia.livecontext.elastic.social.cae.LiveContextPasswordReset"/>
  <input name="next"/>

  <on-start>
    <!--
      Login/Registration is done using https. The commerce system may need secure cookies, which we
      request using a ping with https to the storefront.
    -->
    <evaluate expression="lcWebflowUrlHelper.pingCommerce(flowRequestContext)"/>
    <!-- When CSRF prevention is enabled, this will force the creation of a CSRF user token,
         in order to prevent Login-CSRF. Login POST requests must include this token in their form submit to succeed. -->
    <evaluate expression="csrfTokenManagement.forceToken(flowRequestContext.externalContext.nativeRequest)"/>
    <set name="flowScope.nextUrl" value="webflowUrlHelper.getNextUrl(next, flowRequestContext, true)"/>
    <evaluate expression="loginHelper.postProcessProviderLogin(flowRequestContext)"/>
    <evaluate expression="lcRegistrationHelper.registerAndLoginSilent(flowRequestContext)"/>
  </on-start>

  <view-state id="newPassword" model="passwordExpired">
    <transition on="submit" to="success">
      <evaluate expression="liveContextUserService.updatePassword(passwordExpired, flowRequestContext)"/>
      <!--
        This ping is necessary because after updating the users password, WCS still redirects the user
        for exactly the first request to WCS to its own password reset form. The ping simulates
        that first request, preventing the user of being redirected to WCSs new password form.
      -->
      <evaluate expression="lcWebflowUrlHelper.pingCommerce(flowRequestContext)"/>
    </transition>
  </view-state>

  <end-state id="success" view="externalRedirect:#{nextUrl}" />
</flow>