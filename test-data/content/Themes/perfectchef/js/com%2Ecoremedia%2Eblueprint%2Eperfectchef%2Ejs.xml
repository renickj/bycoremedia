<?xml version="1.0" encoding="UTF-8" ?>
<CMJavaScript folder="/Themes/perfectchef/js" name="com.coremedia.blueprint.perfectchef.js" xmlns:cmexport="http://www.coremedia.com/2012/cmexport">
<locale>en-US</locale>
<master>
</master>
<description></description>
<code grammarName="coremedia-richtext-1.0"><div xmlns="http://www.coremedia.com/2003/richtext-1.0" xmlns:xlink="http://www.w3.org/1999/xlink"><p>/**</p><p> *  CoreMedia Namespace</p><p> */</p><p>var coremedia = (function (module) {</p><p>  return module;</p><p>}(coremedia || {}));</p><p>coremedia.blueprint = (function (module) {</p><p>  return module;</p><p>}(coremedia.blueprint || {}));</p><p>/**</p><p> *  CoreMedia Blueprint Javascript Framework Extension for Perfectchef</p><p> */</p><p>coremedia.blueprint.perfectchef = function (module) {</p><p>  var $ = coremedia.blueprint.$;</p><p>  /**</p><p>   * @type {number} stores the last navigation width in order die identify if mega-menu width adjustments need to be recalculated.</p><p>   */</p><p>  var lastNavWidth = 0;</p><p>  /**</p><p>   * @type {string} specifies the selector for mega menu for adjustment of its children's widths to fit the whole space</p><p>   */</p><p>  var megaMenuSelector = ".mega-menu &gt; li &gt; ul";</p><p>  /**</p><p>   * @type {string} specifies the selector for marketing spot items for equalization of heights</p><p>   */</p><p>  var marketingSpotItemSelector = ".cm-collection--marketingspot .cm-collection__item .cm-teaser--text";</p><p>  /**</p><p>   * @type {string} defines the internal name for the mobile device</p><p>   */</p><p>  module.DEVICE_MOBILE = "mobile";</p><p>  /**</p><p>   * @type {string} defines the internal name of the tablet device</p><p>   */</p><p>  module.DEVICE_TABLET = "tablet";</p><p>  /**</p><p>   * @type {string} defines the internal name of the desktop device</p><p>   */</p><p>  module.DEVICE_DESKTOP = "desktop";</p><p>  /**</p><p>   * private function to adjust the size of non-adaptive content</p><p>   *</p><p>   * @param {jQuery} $content jQuery wrapped dom element to be adjusted</p><p>   * @param {number} baseRatio ratio that the content should be adjusted to</p><p>   * @param {number} boxRatio ratio the content currently has</p><p>   * @param {boolean} allowOverflow defines overflow behaviour of the adjustment:</p><p>   *                  if true content will be cut to fit the box after proper resizing</p><p>   *                  if false content will not be cut after proper resizing creating horizontal or veritical borders</p><p>   */</p><p>  var adjustNonAdaptiveContent = function ($content, baseRatio, boxRatio, allowOverflow) {</p><p>    var adjustment;</p><p>    // detect if a horizontal repositioning is needed</p><p>    if ((allowOverflow &amp;&amp; baseRatio &gt; boxRatio) || (!allowOverflow &amp;&amp; baseRatio &lt;= boxRatio)) {</p><p>      // horizontal repositioning is needed</p><p>      adjustment = (1 - baseRatio / boxRatio) / 2;</p><p>      $content.addClass("cm-non-adaptive-content--fit-height");</p><p>      // adjust positioning to the left to match the expected result using percentage (for responsive layout)</p><p>      $content.css("margin-top", "");</p><p>      $content.css("margin-left", (adjustment * 100) + "%");</p><p>    } else {</p><p>      // vertical repositioning is needed</p><p>      adjustment = ((1 / boxRatio - 1 / baseRatio) / 2);</p><p>      $content.removeClass("cm-non-adaptive-content--fit-height");</p><p>      // adjust positioning to the top to match the expected result using percentage (for responsive layout)</p><p>      $content.css("margin-top", (adjustment * 100) + "%");</p><p>      $content.css("margin-left", "");</p><p>    }</p><p>  };</p><p>  /**</p><p>   * set width of each item in the mega-menu depending to screen-size</p><p>   */</p><p>  module.setMegaMenuItemsWidth = function () {</p><p>    var $navMegaMenu = $(megaMenuSelector);</p><p>    // detect width of navigation</p><p>    var currentNavWidth = $navMegaMenu.width();</p><p>    // set width only if changed</p><p>    if (currentNavWidth != lastNavWidth) {</p><p>      // detect how much space each navigation item has keeping taking border of 1px for each element into account</p><p>      var $children = $navMegaMenu.children("li");</p><p>      var $childrenExceptLast = $children.not(":last");</p><p>      var $lastChild = $children.last();</p><p>      var numChildren = $children.length;</p><p>      var singleWidth = Math.floor(currentNavWidth / numChildren - 1);</p><p>      // calculate how much width is left for the last element after rounding the base width down</p><p>      var restWidth = Math.floor(currentNavWidth - numChildren * singleWidth);</p><p>      // adjust width for all elements exept the last element</p><p>      $childrenExceptLast.css("width", Math.floor(currentNavWidth / numChildren - 1));</p><p>      // last element gets rest space</p><p>      $lastChild.css("width", (singleWidth + restWidth));</p><p>      // Manual calculation of sub-menu-width to allow precise alignment below navigation bar</p><p>      $childrenExceptLast.children("ul").css("min-width", 2 * singleWidth - 1);</p><p>      // last element's sub-menu-width needs different calculation</p><p>      $lastChild.children("ul").css("min-width", 2 * singleWidth + restWidth - 2);</p><p>      // save currentNavWidth as lastNavWidth</p><p>      lastNavWidth = currentNavWidth;</p><p>    }</p><p>  };</p><p>  /**</p><p>   * unset width of each item in the mega-menu</p><p>   */</p><p>  module.unsetMegaMenuItemsWidth = function () {</p><p>    var $navMegaMenu = $(megaMenuSelector);</p><p>    var $children = $navMegaMenu.children("li");</p><p>    // reset mega-menu-items widths</p><p>    $children.css("width", "");</p><p>    // reset mega-menu-items sub-menu widths</p><p>    $children.children("ul").css("min-width", "");</p><p>    // reset lastNavWidth so setMegaMenuItemsWidth recalculates if used again</p><p>    lastNavWidth = 0;</p><p>  };</p><p>  /**</p><p>   * equalize height of each item in marketing spot</p><p>   */</p><p>  module.setMarketingSpotItemsHeight = function () {</p><p>    // first unset all heights, otherwise the height can only decrease</p><p>    module.unsetMarketingSpotItemsHeight();</p><p>    var $marketingSpotItems = $(marketingSpotItemSelector);</p><p>    // calculate biggest height by iterating over all marketing spot items</p><p>    var biggest = 0;</p><p>    $marketingSpotItems.each(function () {</p><p>      var current = $(this).height();</p><p>      if (current &gt; biggest) {</p><p>        biggest = current;</p><p>      }</p><p>    });</p><p>    // calculate new height based on biggest height for each element</p><p>    $marketingSpotItems.each(function () {</p><p>      var diff = biggest - $(this).height();</p><p>      $(this).css({</p><p>        "height": biggest + "px",</p><p>        "padding-top": (diff / 2) + "px"</p><p>      });</p><p>    });</p><p>  };</p><p>  /**</p><p>   * unset height of each item in the marketing spot</p><p>   */</p><p>  module.unsetMarketingSpotItemsHeight = function () {</p><p>    var $marketingSpotItems = $(marketingSpotItemSelector);</p><p>    $marketingSpotItems.css({</p><p>        "height": "",</p><p>        "padding-top": ""</p><p>      });</p><p>  };</p><p>  /**</p><p>   * update a single given non-adaptive image</p><p>   * @param {Image} image dom node</p><p>   */</p><p>  module.updateNonAdaptiveImage = function (image) {</p><p>    var $image = $(image);</p><p>    var config = $.extend({overflow: false}, $image.data("cm-non-adaptive-content"));</p><p>    var $box = $image.parent();</p><p>    var baseImage = new Image();</p><p>    baseImage.src = image.src;</p><p>    var baseRatio = baseImage.width / baseImage.height;</p><p>    var boxRatio = $box.width() / $box.height();</p><p>    adjustNonAdaptiveContent($image, baseRatio, boxRatio, config.overflow);</p><p>  };</p><p>  /**</p><p>   * update a single given non-adaptive video</p><p>   * @param {HTMLVideoElement} video</p><p>   */</p><p>  module.updateNonAdaptiveVideo = function (video) {</p><p>    var $video = $(video);</p><p>    var config = $.extend({overflow: false}, $video.data("cm-non-adaptive-content"));</p><p>    var $box = $video.parent();</p><p>    var baseRatio = $video.width() / $video.height();</p><p>    if ($video.is("video")) {</p><p>      baseRatio = video.videoWidth / video.videoHeight;</p><p>    }</p><p>    var boxRatio = $box.width() / $box.height();</p><p>    adjustNonAdaptiveContent($video, baseRatio, boxRatio, config.overflow);</p><p>  };</p><p>  /**</p><p>   * updates non adaptive images and videos for the whole page</p><p>   */</p><p>  module.updateNonAdaptiveContents = function () {</p><p>    $(document.body).find("img[data-cm-non-adaptive-content]").each(function () {</p><p>      module.updateNonAdaptiveImage(this);</p><p>    });</p><p>    $(document.body).find("video[data-cm-non-adaptive-content]").each(function () {</p><p>      module.updateNonAdaptiveVideo(this);</p><p>    });</p><p>  };</p><p>  /**</p><p>   * updates all masonry grids on the site regarding their order in DOM. Deepest grid are</p><p>   * updated first, so parent grids can adjust to children's dimensions.</p><p>   */</p><p>  module.updateMasonry = function () {</p><p>    // find all grids and layout them in reversed order regarding the depth inside DOM</p><p>    var $grids = $(".cm-js-masonry").sort(function (a, b) {</p><p>      return $(a).parents().length &lt; $(b).parents().length;</p><p>    });</p><p>    $grids.masonry("layout");</p><p>  };</p><p>  /**</p><p>   * updates a control element for a shopping cart</p><p>   * @param {String} control the control element</p><p>   */</p><p>  module.updateCartControl = function (control) {</p><p>    var $control = $(control);</p><p>    var config = $.extend({symbol: undefined, badge: undefined, cart: undefined}, $control.data("cm-cart-control"));</p><p>    // only apply cart control if configuration is sufficient</p><p>    if (config.symbol !== undefined &amp;&amp; config.badge !== undefined &amp;&amp; config.cart !== undefined) {</p><p>      // read config of the attached cart</p><p>      var cartConfig = $.extend({itemCount: 0}, $control.find(config.cart).data("cm-cart"));</p><p>      // find dom element representing the cart symbol</p><p>      var $symbol = $control.find(config.symbol);</p><p>      // update cart symbol based on item count</p><p>      if (cartConfig.itemCount &gt; 0) {</p><p>        $symbol.removeClass("icon-cart-empty");</p><p>        $symbol.addClass("icon-cart-with-items");</p><p>      } else {</p><p>        $symbol.addClass("icon-cart-empty");</p><p>        $symbol.removeClass("icon-cart-with-items");</p><p>      }</p><p>      // add item count to cart badge</p><p>      $control.find(config.badge).html(cartConfig.itemCount);</p><p>    }</p><p>  };</p><p>  return module;</p><p>}(coremedia.blueprint.perfectchef || {});</p><p>// --- DOCUMENT READY --------------------------------------------------------------------------------------------------</p><p>coremedia.blueprint.$(function () {</p><p>  var $ = coremedia.blueprint.$;</p><p>  var $window = $(window);</p><p>  var $document = $(document);</p><p>  // init device detection</p><p>  coremedia.blueprint.deviceDetector.init();</p><p>  // initialize masonry collections that are not initialized automatically</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecoratorByData({isInitLayout: true}, "masonry-options", function ($target, config) {</p><p>    if (!config.isInitLayout) {</p><p>      $target.masonry(config);</p><p>      $target.masonry("unbindResize");</p><p>      $target.masonry("layout");</p><p>    }</p><p>  });</p><p>  // move to top button</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecorator(function ($target) {</p><p>    var selector = ".cm-icon--button-top";</p><p>    $target.findAndSelf(selector).click(function () {</p><p>      $("html, body").animate({scrollTop: 0}, "slow");</p><p>      return false;</p><p>    });</p><p>  });</p><p>  // assign accordion-item functionality</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecorator(function ($target) {</p><p>    var selector = ".cm-accordion-item";</p><p>    $target.findAndSelf(selector).each(function () {</p><p>      var $item = $(this);</p><p>      var $accordion = $item.closest(".cm-collection--accordion");</p><p>      var $itemHeader = $item.find(".cm-accordion-item__header").first();</p><p>      $itemHeader.on("click", function () {</p><p>        coremedia.blueprint.basic.accordion.change($accordion, $item);</p><p>      });</p><p>    });</p><p>  });</p><p>  // init slideshows</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecorator(function ($target) {</p><p>    var identifier = "cm-slideshow";</p><p>    var selector = "[data-" + identifier + "]";</p><p>    $target.findAndSelf(selector).each(function () {</p><p>      var $slider = $(this);</p><p>      var defaultConfig = {</p><p>        itemSelector: undefined, // DEPRECATED</p><p>        container: undefined,</p><p>        item: undefined,</p><p>        timeout: 5000,</p><p>        prev: undefined,</p><p>        next: undefined</p><p>      };</p><p>      var config = $.extend(defaultConfig, $slider.data(identifier));</p><p>      // backward compatibility</p><p>      if (config.itemSelector !== undefined) {</p><p>        var classes = config.itemSelector.split("&gt;", 2);</p><p>        if (classes.length == 2) {</p><p>          config.container = "&gt; " + classes[0].trim();</p><p>          config.item = "&gt; " + classes[1].trim();</p><p>        }</p><p>      }</p><p>      if (config.container !== undefined &amp;&amp; config.item !== undefined) {</p><p>        // move quickinfos of imagemap outside slideshow container because they will hide the overflow causing quickinfo</p><p>        // to be cut if it too large. This also avoids the creation of additional dom elements</p><p>        var $slidesContainer = $slider.find(config.container);</p><p>        var $imageMapQuickInfos = $slidesContainer.find(config.item + " " + ".cm-imagemap__quickinfo");</p><p>        $imageMapQuickInfos.insertAfter($slidesContainer);</p><p>        var cycleConfig = {</p><p>          log: false,</p><p>          slides: config.item,</p><p>          timeout: config.timeout,</p><p>          // 600 for mobile, 1000 for desktop</p><p>          speed: (coremedia.blueprint.deviceDetector.getLastDevice().type == coremedia.blueprint.perfectchef.DEVICE_DESKTOP) ? 1000 : 600,</p><p>          pauseOnHover: true,</p><p>          fx: "scrollHorz",</p><p>          swipe: true</p><p>        };</p><p>        if (config.prev !== undefined) {</p><p>          cycleConfig.prev = config.prev;</p><p>        }</p><p>        if (config.next !== undefined) {</p><p>          cycleConfig.next = config.next;</p><p>        }</p><p>        // detect if current slide has an active quickinfo</p><p>        var hasActiveSlideActiveQuickInfo = function () {</p><p>          var result = false;</p><p>          var $areas = $slider.find(".cycle-slide-active .cm-imagemap__areas");</p><p>          $areas.find(".cm-imagemap__hotzone").each(function () {</p><p>            var $button = $(this);</p><p>            var config = $.extend({target: undefined}, $button.data("cm-button--quickinfo"));</p><p>            result = result || $("#" + config.target).is(".cm-quickinfo--active:not(.cm-quickinfo--main)");</p><p>          });</p><p>          return result;</p><p>        };</p><p>        // hide all quickinfos</p><p>        var hideAllQuickinfos = function () {</p><p>          $slider.children(".cm-quickinfo").css({"visibility": "hidden", "position": "absolute"});</p><p>        };</p><p>        // show quickinfos on active slide</p><p>        var showQuickinfosInActiveSlide = function () {</p><p>          // show quickinfos for active slide only</p><p>          var $areas = $slider.find(".cycle-slide-active .cm-imagemap__areas");</p><p>          $areas.find(".cm-imagemap__hotzone").each(function () {</p><p>            var $button = $(this);</p><p>            var config = $.extend({target: undefined}, $button.data("cm-button--quickinfo"));</p><p>            var $quickinfo = $("#" + config.target);</p><p>            $quickinfo.css({"position": "", "visibility": ""});</p><p>          });</p><p>          var areasConfig = $.extend({quickInfoMainId: undefined}, $areas.data("cm-areas"));</p><p>          if (areasConfig.quickInfoMainId !== undefined) {</p><p>            $("#" + areasConfig.quickInfoMainId).css({"position": "", "visibility": ""});</p><p>          }</p><p>        };</p><p>        // pause auto cycling</p><p>        var pause = function () {</p><p>          $slidesContainer.cycle("pause");</p><p>        };</p><p>        // resume auto cycling</p><p>        var resume = function () {</p><p>          $slidesContainer.cycle("resume");</p><p>        };</p><p>        /*</p><p>         * Behaviour of slideshow dependend on quickinfo state</p><p>         * 1) current slide stops auto cycling if quickinfo is opened (ignoring main quickinfo)</p><p>         * 2) current slide resumes auto cycling if quickinfo is closed (ignoring main quickinfo)</p><p>         * 3) if manual interactions are performed (prev/next) auto cycling is resumed</p><p>         * 4) if slide with open quickinfo becomes active slide auto cycling is stopped</p><p>         */</p><p>        // implements 1) + 2)</p><p>        $slider.find(".cm-quickinfo:not(.cm-quickinfo--main)").on(coremedia.blueprint.quickInfo.EVENT_QUICKINFO_CHANGED, function () {</p><p>          if (hasActiveSlideActiveQuickInfo()) {</p><p>            pause();</p><p>          } else {</p><p>            resume();</p><p>          }</p><p>        });</p><p>        // implements 3)</p><p>        $slidesContainer.on("cycle-prev", resume);</p><p>        $slidesContainer.on("cycle-next", resume);</p><p>        // implements 4)</p><p>        $slidesContainer.on("cycle-after", function () {</p><p>          // if slideshow contains an active quickinfo stop auto cycling</p><p>          if (hasActiveSlideActiveQuickInfo()) {</p><p>            pause();</p><p>          }</p><p>        });</p><p>        $slidesContainer.on("cycle-initialized", function () {</p><p>          hideAllQuickinfos();</p><p>          showQuickinfosInActiveSlide();</p><p>          $document.trigger(coremedia.blueprint.basic.EVENT_LAYOUT_CHANGED);</p><p>        });</p><p>        $slidesContainer.on("cycle-before", function () {</p><p>          hideAllQuickinfos();</p><p>          $document.trigger(coremedia.blueprint.basic.EVENT_LAYOUT_CHANGED);</p><p>        });</p><p>        $slidesContainer.on("cycle-after", function () {</p><p>          showQuickinfosInActiveSlide();</p><p>          // on tablet slideshow varies in height if imagemap is attached</p><p>          $document.trigger(coremedia.blueprint.basic.EVENT_LAYOUT_CHANGED);</p><p>        });</p><p>        // always show arrows on touch enabled devices</p><p>        if ("ontouchstart" in document.documentElement) {</p><p>          $slider.addClass("cm-collection--slideshow-touch");</p><p>        }</p><p>        $slidesContainer.cycle(cycleConfig);</p><p>      }</p><p>    });</p><p>  });</p><p>  // lightbox-gallery</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecoratorBySelector(".cm-lightbox--gallery", function ($target) {</p><p>    $target.magnificPopup({</p><p>      gallery: {enabled: true},</p><p>      delegate: ":not(.cycle-sentinel) a",</p><p>      type: "image"</p><p>    });</p><p>  });</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecoratorBySelector(".cm-product-assets", function ($target) {</p><p>    var $slideshow = $target.find(".cm-product-assets__slideshow");</p><p>    var $carousel = $target.find(".cm-product-assets__carousel");</p><p>    // TODO improve performance</p><p>    var $slideshows = $target.find(".cm-product-assets__slideshow, .cm-product-assets__carousel");</p><p>    $slideshow.cycle({</p><p>      slides: "&gt; .cm-lightbox",</p><p>      timeout: 0,</p><p>      prev: "&gt; .cm-direction-arrow--left",</p><p>      next: "&gt; .cm-direction-arrow--right",</p><p>      fx: "fade",</p><p>      swipe: true,</p><p>      log: false</p><p>    });</p><p>    // sometimes cycle carousel plugin does not remove opacity of elements</p><p>    $carousel.on("cycle-initialized", function () {</p><p>      $(this).find(".cycle-slide").css("opacity", 1);</p><p>    });</p><p>    $carousel.cycle({</p><p>      slides: "&gt; .cycle-slide",</p><p>      timeout: 0,</p><p>      fx: "carousel",</p><p>      carouselVisible: 4,</p><p>      carouselFluid: true,</p><p>      allowWrap: false</p><p>    });</p><p>    $slideshows.each(function () {</p><p>      $(this).cycle()</p><p>              .on("cycle-initialized", function () {</p><p>                $(document).trigger(coremedia.blueprint.basic.EVENT_LAYOUT_CHANGED);</p><p>              }).on('cycle-next cycle-prev', function (e, opts) {</p><p>                // advance the other slideshow</p><p>                $slideshows.not(this).cycle('goto', opts.currSlide);</p><p>              });</p><p>    });</p><p>    $carousel.find('.cycle-slide').click(function () {</p><p>      var index = $carousel.data('cycle.API').getSlideIndex(this);</p><p>      $slideshows.cycle('goto', index);</p><p>    });</p><p>  });</p><p>  // init popups</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecorator(function ($target) {</p><p>    var identifier = "cm-popup-control";</p><p>    var classButtonActive = "cm-popup-button--active";</p><p>    var baseConfig = {</p><p>      button: undefined,</p><p>      popup: undefined</p><p>    };</p><p>    var selector = "[data-" + identifier + "]";</p><p>    $target.findAndSelf(selector).each(function () {</p><p>      var $this = $(this);</p><p>      var config = $.extend(baseConfig, $this.data(identifier));</p><p>      if (config.button !== undefined &amp;&amp; config.popup !== undefined) {</p><p>        var $button = $this.find(config.button);</p><p>        var $popup = $this.find(config.popup);</p><p>        // bind button state to popup state</p><p>        $popup.on(coremedia.blueprint.basic.popup.EVENT_POPUP_CHANGED, function (event, opened) {</p><p>          if (opened) {</p><p>            $button.addClass(classButtonActive);</p><p>          } else {</p><p>            $button.removeClass(classButtonActive);</p><p>          }</p><p>        });</p><p>        $button.on("click", function () {</p><p>          // check if popup control is not disabled</p><p>          if (!($.extend({disabled: false}, $this.data(identifier)).disabled)) {</p><p>            // Toggle popup state</p><p>            coremedia.blueprint.basic.popup.toggle($popup);</p><p>            return false;</p><p>          }</p><p>        });</p><p>      }</p><p>    });</p><p>  });</p><p>  // close all popups if clicked outside popup or ESC is pressed</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecorator(function ($target) {</p><p>    var identifierPopup = ".cm-popup";</p><p>    var $body = $target.findAndSelf("body");</p><p>    //outside</p><p>    $body.on("click", function (event) {</p><p>      if ($(event.target).closest(identifierPopup).length === 0) {</p><p>        coremedia.blueprint.basic.popup.close($body.find(identifierPopup));</p><p>      }</p><p>    });</p><p>    // ESC</p><p>    $body.on("keydown", function (event) {</p><p>      if (event.keyCode === 27) {</p><p>        coremedia.blueprint.basic.popup.close($body.find(identifierPopup));</p><p>      }</p><p>    });</p><p>  });</p><p>  // initialize cart control (popup + cart indicator icon)</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecorator(function ($target) {</p><p>    var identifier = "cm-cart-control";</p><p>    var baseConfig = {cart: undefined};</p><p>    var selector = "[data-" + identifier + "]";</p><p>    $target.findAndSelf(selector).each(function () {</p><p>      var $control = $(this);</p><p>      var config = $.extend(baseConfig, $control.data(identifier));</p><p>      if (config.cart !== undefined) {</p><p>        $control.find(config.cart).on("cartUpdated", function () {</p><p>          coremedia.blueprint.perfectchef.updateCartControl($control);</p><p>        });</p><p>      }</p><p>      coremedia.blueprint.perfectchef.updateCartControl($control);</p><p>    });</p><p>  });</p><p>  // initialize remove from cart buttons</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecoratorBySelector(".cm-cart", function ($target) {</p><p>    var identifier = "cm-cart-remove-item";</p><p>    var selector = "[data-" + identifier + "]";</p><p>    $target.findAndSelf(selector).each(function () {</p><p>      var $button = $(this);</p><p>      var buttonConfig = $.extend({</p><p>        id: undefined,</p><p>        link: undefined,</p><p>        cart: undefined,</p><p>        item: undefined,</p><p>        quantity: 0</p><p>      }, $button.data(identifier));</p><p>      var $cart = $button.closest(buttonConfig.cart);</p><p>      var cartConfig = $.extend({token: undefined}, $cart.data("cm-cart"));</p><p>      if (buttonConfig.id !== undefined &amp;&amp; buttonConfig.link !== undefined &amp;&amp; cartConfig.token !== undefined) {</p><p>        //button clicked</p><p>        $button.on("click", function (e) {</p><p>          // don't let the add-to-cart button trigger the teaser link</p><p>          e.preventDefault();</p><p>          if (!$button.hasClass(identifier + "--disabled")) {</p><p>            var url = buttonConfig.link;</p><p>            coremedia.blueprint.basic.ajax({</p><p>              type: "POST",</p><p>              url: url,</p><p>              data: {</p><p>                orderItemId: buttonConfig.id,</p><p>                action: "removeOrderItem",</p><p>                _CSRFToken: cartConfig.token</p><p>              },</p><p>              dataType: 'text'</p><p>            }).done(function () {</p><p>              $(".cm-icon--cart").each(function () {</p><p>                coremedia.blueprint.basic.refreshFragment($(this));</p><p>              });</p><p>            });</p><p>          }</p><p>        });</p><p>      }</p><p>    });</p><p>  });</p><p>  // add to cart functionality</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecorator(function ($target) {</p><p>    var identifier = "cm-cart-add-item";</p><p>    var selector = "[data-" + identifier + "]";</p><p>    $target.findAndSelf(selector).each(function () {</p><p>      var $button = $(this);</p><p>      var buttonConfig = $.extend({id: undefined, link: undefined, cart: undefined}, $button.data(identifier));</p><p>      if (buttonConfig.id !== undefined &amp;&amp; buttonConfig.link !== undefined) {</p><p>        //button clicked</p><p>        $button.on("click", function (e) {</p><p>          // don't let the add-to-cart button trigger the teaser link</p><p>          e.preventDefault();</p><p>          var $cart = $(buttonConfig.cart);</p><p>          var cartConfig = $.extend({token: undefined}, $cart.data("cm-cart"));</p><p>          var url = buttonConfig.link;</p><p>          var $icon = $button.find("i");</p><p>          if (!$button.hasClass("cm-button--loading")) {</p><p>            //disable button and show spinner</p><p>            $button.addClass("cm-button--loading");</p><p>            $icon.removeClass("icon-checkmark").removeClass("icon-warning");</p><p>            // send add-to-cart call</p><p>            coremedia.blueprint.basic.ajax({</p><p>              type: "POST",</p><p>              url: url,</p><p>              data: {</p><p>                externalTechId: buttonConfig.id,</p><p>                action: "addOrderItem",</p><p>                _CSRFToken: cartConfig.token</p><p>              },</p><p>              dataType: 'text'</p><p>            }).done(function () {</p><p>              //show success icon</p><p>              $icon.addClass("icon-checkmark");</p><p>              window.setTimeout(function () {</p><p>                $icon.fadeOut(400, function () {</p><p>                  $icon.removeClass("icon-checkmark").removeAttr("style");</p><p>                });</p><p>              }, 1500);</p><p>              //refresh cart</p><p>              $(".cm-icon--cart").each(function () {</p><p>                coremedia.blueprint.basic.refreshFragment($(this));</p><p>              });</p><p>            }).fail(function () {</p><p>              $icon.addClass("icon-warning");</p><p>            }).complete(function () {</p><p>              $button.removeClass("cm-button--loading");</p><p>            });</p><p>          }</p><p>        });</p><p>      }</p><p>    });</p><p>  });</p><p>  // initialize search form</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecorator(function ($target) {</p><p>    var baseConfig = {urlSuggestions: undefined, minLength: undefined};</p><p>    $target.findAndSelf(".cm-search-form").each(function () {</p><p>      var $search = $(this);</p><p>      var config = $.extend(baseConfig, $search.data("cm-search"));</p><p>      var $popupSuggestions = $(this).find(".cm-popup--search-suggestions");</p><p>      var $listSuggestions = $(this).find(".cm-search-suggestions");</p><p>      var $suggestion = $listSuggestions.find(".cm-search-suggestions__item").clone();</p><p>      var $prototypeSuggestion = $suggestion.clone();</p><p>      var lastQuery = undefined;</p><p>      // remove the sample suggestion from dom</p><p>      $suggestion.remove();</p><p>      $search.find(".search_input").bind("input", function () {</p><p>        var $input = $(this);</p><p>        var value = $input.val();</p><p>        coremedia.blueprint.basic.popup.close($popupSuggestions);</p><p>        // only show suggestions if the search text has the minimum length</p><p>        if (value.length &gt;= config.minLength) {</p><p>          // clear suggestions</p><p>          $listSuggestions.html("");</p><p>          // save last query</p><p>          lastQuery = value;</p><p>          coremedia.blueprint.basic.ajax({</p><p>            url: config.urlSuggestions,</p><p>            dataType: "json",</p><p>            data: {</p><p>              type: "json",</p><p>              query: value</p><p>            }</p><p>          }).done(function (data) {</p><p>            // in case ajax calls earlier ajax calls receive their result later, only show most recent results</p><p>            if (lastQuery == value) {</p><p>              var classNonEmpty = "cm-search-suggestions--non-empty";</p><p>              $listSuggestions.removeClass(classNonEmpty);</p><p>              // transform search suggestions into dom elements</p><p>              $.map(data, function (item) {</p><p>                $listSuggestions.addClass(classNonEmpty);</p><p>                var $suggestion = $prototypeSuggestion.clone();</p><p>                $listSuggestions.append($suggestion);</p><p>                $suggestion.html("&lt;b&gt;" + value + "&lt;/b&gt;" + item.label.substr(value.length));</p><p>                // attribute must exist, otherwise selector will not match</p><p>                $suggestion.attr("data-cm-search-suggestion", "");</p><p>                // set attribute for jquery (not visible in dom)</p><p>                $suggestion.data("cm-search-suggestion", {</p><p>                  form: ".cm-search-form",</p><p>                  target: ".search_input",</p><p>                  value: item.value,</p><p>                  popup: ".cm-popup--search-suggestions"</p><p>                });</p><p>                coremedia.blueprint.nodeDecorationService.decorateNode($suggestion);</p><p>              });</p><p>              // show search suggestions</p><p>              coremedia.blueprint.basic.popup.open($popupSuggestions);</p><p>              // set focus back to input element</p><p>              $input.focus();</p><p>              $document.trigger(coremedia.blueprint.basic.EVENT_NODE_APPENDED, [$suggestion]);</p><p>            }</p><p>          });</p><p>        }</p><p>      });</p><p>    });</p><p>  });</p><p>  // update tabs in wcs (e.g. pdp)</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecoratorBySelector(".tab_container", function ($target) {</p><p>    $target.on("click", function () {</p><p>      $document.trigger(coremedia.blueprint.basic.EVENT_LAYOUT_CHANGED);</p><p>    });</p><p>  });</p><p>  // initially updates new non-adaptive boxes</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecorator(function ($target) {</p><p>    var identifier = "cm-non-adaptive-content";</p><p>    var selector = "[data-" + identifier + "]";</p><p>    var imageSelector = "img" + selector;</p><p>    $target.findAndSelf(imageSelector).each(function () {</p><p>      // consider using images loaded plugin</p><p>      $(this).on("load", function () {</p><p>        coremedia.blueprint.perfectchef.updateNonAdaptiveImage(this);</p><p>      });</p><p>      // load is not always triggered (e.g. if image is cached or event is attached too late), so at least execute once</p><p>      coremedia.blueprint.perfectchef.updateNonAdaptiveImage(this);</p><p>    });</p><p>    var videoSelector = "iframe" + selector + ", video" + selector;</p><p>    $target.findAndSelf(videoSelector).each(function () {</p><p>      coremedia.blueprint.perfectchef.updateNonAdaptiveVideo(this);</p><p>    });</p><p>  });</p><p>  // equalize line heights for all cm-text elements, so even multi column layouts appear print-like</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecorator(function ($target) {</p><p>    var baseLine = $(".cm-text p:first").css("line-height");</p><p>    if (baseLine !== undefined) {</p><p>      baseLine = baseLine.replace("px", "");</p><p>      var selector = ".cm-text img";</p><p>      $target.findAndSelf(selector).each(function () {</p><p>        var $image = $(this);</p><p>        var addPercent = 0;</p><p>        if ($image.css("float") == "none") {</p><p>          var width = $image.width();</p><p>          var height = $image.height();</p><p>          var overhead = height - baseLine * Math.floor(height / baseLine);</p><p>          if (overhead &gt; 0) {</p><p>            var add = baseLine - overhead;</p><p>            addPercent = add / width * 100;</p><p>          }</p><p>        }</p><p>        $image.css("margin-bottom", addPercent + "%");</p><p>      });</p><p>    }</p><p>  });</p><p>  // initializes search suggestions</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecorator(function ($target) {</p><p>    // read configuration</p><p>    var baseConfig = {form: undefined, target: undefined, value: undefined, popup: undefined};</p><p>    var identifier = "cm-search-suggestion";</p><p>    var selector = "[data-" + identifier + "]";</p><p>    $target.findAndSelf(selector).each(function () {</p><p>      var $suggestion = $(this);</p><p>      var config = $.extend(baseConfig, $suggestion.data(identifier));</p><p>      var $popup = $(config.popup);</p><p>      // when clicking search suggestions form should be filled with the suggestion and be submitted</p><p>      $suggestion.bind("click", function () {</p><p>        coremedia.blueprint.basic.popup.close($popup);</p><p>        $(config.target).val(config.value);</p><p>        $(config.form).submit();</p><p>      });</p><p>    });</p><p>  });</p><p>  // init html5 videos</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecorator(function ($target) {</p><p>    var baseConfig = {flash: undefined};</p><p>    var identifier = "cm-video--html5";</p><p>    var selector = "[data-" + identifier + "]";</p><p>    $target.findAndSelf(selector).each(function () {</p><p>      var $video = $(this);</p><p>      var config = $.extend(baseConfig, $video.data(identifier));</p><p>      //noinspection JSUnusedGlobalSymbols</p><p>      var me = new MediaElement(</p><p>              this,</p><p>              {</p><p>                plugins: ["flash"],</p><p>                pluginPath: "", // needs to be empty</p><p>                flashName: config.flash,</p><p>                success: function (mediaElement) {</p><p>                  // delegate to own event, so the implementation does not rely on MediaElement Plugin</p><p>                  // additionally youtube/vimeo/.. players could be able to trigger videoEnded event</p><p>                  mediaElement.addEventListener("ended", function () {</p><p>                    $video.trigger("videoEnded");</p><p>                  }, false);</p><p>                  mediaElement.addEventListener("canplay", function () {</p><p>                    $document.trigger(coremedia.blueprint.basic.EVENT_LAYOUT_CHANGED);</p><p>                  }, false);</p><p>                }</p><p>              });</p><p>      $video.on("webkitendfullscreen", function () {</p><p>        $video.trigger("videoEndFullScreen");</p><p>      });</p><p>      $video.on("videoStart", function () {</p><p>        coremedia.blueprint.perfectchef.updateNonAdaptiveVideo($video[0]);</p><p>        me.play();</p><p>      });</p><p>    });</p><p>  });</p><p>  // init vimeo videos</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecorator(function ($target) {</p><p>    // Helper function for sending a message to a player</p><p>    var postHelper = function (node, url, action, value) {</p><p>      var data = { method: action };</p><p>      if (value) {</p><p>        data.value = value;</p><p>      }</p><p>      node.contentWindow.postMessage(JSON.stringify(data), url);</p><p>    };</p><p>    var baseConfig = {playerId: undefined};</p><p>    var identifier = "cm-video--vimeo";</p><p>    // vimeo video is and must be iframe</p><p>    var selector = "iframe." + identifier;</p><p>    $target.findAndSelf(selector).each(function () {</p><p>      var $video = $(this);</p><p>      var protocol = "http";</p><p>      if (window.location.href.match(/^https:(.+)/)) {</p><p>        protocol = "https";</p><p>      }</p><p>      var url = protocol + ":" + $video.attr("src").split("?")[0];</p><p>      $window.on("message", function (e) {</p><p>        // config always needs to be fresh</p><p>        var config = $.extend(baseConfig, $video.data(identifier));</p><p>        var data = JSON.parse(e.originalEvent.data);</p><p>        if (data["player_id"] == config.playerId) {</p><p>          switch (data.event) {</p><p>            case 'ready':</p><p>              $document.trigger(coremedia.blueprint.basic.EVENT_LAYOUT_CHANGED);</p><p>              // activate finish event</p><p>              postHelper($video[0], url, "addEventListener", "finish");</p><p>              break;</p><p>            case 'finish':</p><p>              $video.trigger("videoEnded");</p><p>              break;</p><p>          }</p><p>        }</p><p>      });</p><p>      $video.on("videoStart", function () {</p><p>        postHelper($video[0], url, "play");</p><p>      });</p><p>    });</p><p>  });</p><p>  // handle video teasers</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecorator(function ($target) {</p><p>    var baseConfig = {</p><p>      preview: undefined,</p><p>      play: undefined,</p><p>      player: undefined,</p><p>      backlightTimeout: 200,</p><p>      features: ['backlight']</p><p>    };</p><p>    var identifier = "cm-teaser--video";</p><p>    var selector = "[data-" + identifier + "]";</p><p>    $target.findAndSelf(selector).each(function () {</p><p>      var $videoTeaser = $(this);</p><p>      var config = $.extend(baseConfig, $videoTeaser.data(identifier));</p><p>      var $preview = $videoTeaser.find(config.preview);</p><p>      var $play = $videoTeaser.find(config.play);</p><p>      var $player = $videoTeaser.find(config.player);</p><p>      $play.bind("click", function () {</p><p>        $preview.addClass("cm-hidden");</p><p>        $player.removeClass("cm-hidden");</p><p>        var selector = ".cm-video";</p><p>        $player.findAndSelf(selector).each(function () {</p><p>          var $video = $(this);</p><p>          var replacePlayerWithStillImage = function () {</p><p>            $player.addClass("cm-hidden");</p><p>            $preview.removeClass("cm-hidden");</p><p>            // window might have changed while video player was active, e.g. portrait-&gt;landscape</p><p>            $(document).trigger(coremedia.blueprint.basic.EVENT_LAYOUT_CHANGED);</p><p>          };</p><p>          $video.on("videoEnded", replacePlayerWithStillImage);</p><p>          // when playback is canceled on mobiles, videoEnded is not triggered...</p><p>          $video.on("videoEndFullScreen", replacePlayerWithStillImage);</p><p>          $video.trigger("videoStart");</p><p>        });</p><p>        return false;</p><p>      });</p><p>    });</p><p>  });</p><p>  // adjust layout if richtext images (which currently are not adaptive) are loaded</p><p>  var updateTimer = 0;</p><p>  coremedia.blueprint.nodeDecorationService.addNodeDecoratorBySelector(".cm-text img", function ($target) {</p><p>    $target.on("load", function () {</p><p>      if (updateTimer !== 0) {</p><p>        clearTimeout(updateTimer);</p><p>      }</p><p>      updateTimer = setTimeout(function () {</p><p>        $document.trigger(coremedia.blueprint.basic.EVENT_LAYOUT_CHANGED);</p><p>      }, 100);</p><p>    });</p><p>  });</p><p>  // --- EVENTS --------------------------------------------------------------------------------------------------------</p><p>  // show/hide "move to top" button</p><p>  $window.scroll(function () {</p><p>    // display icon after scrolling 1/3 of the document height</p><p>    var $buttonTop = $(".cm-icon--button-top");</p><p>    if ($window.scrollTop() &gt; $document.height() / 3) {</p><p>      $buttonTop.removeClass("cm-hidden");</p><p>    } else {</p><p>      $buttonTop.addClass("cm-hidden");</p><p>    }</p><p>  });</p><p>  // masonry has to be informed if nodes have appended</p><p>  $document.on(coremedia.blueprint.basic.EVENT_NODE_APPENDED, function (event, $node) {</p><p>    // check if inside masonry collection</p><p>    $node.closest(".cm-js-masonry").each(function () {</p><p>      $(this).masonry("reloadItems");</p><p>      $document.trigger(coremedia.blueprint.basic.EVENT_LAYOUT_CHANGED);</p><p>    });</p><p>  });</p><p>  // Synchronizes the layout process. Only one layout event at a time is allowed</p><p>  var isLayoutInProgress = false;</p><p>  // trigger all functions that should recalculate if the layout has changed</p><p>  var layout = function () {</p><p>    coremedia.blueprint.perfectchef.updateNonAdaptiveContents();</p><p>    coremedia.blueprint.perfectchef.updateMasonry();</p><p>    // only on desktop</p><p>    if (coremedia.blueprint.deviceDetector.getLastDevice().type == coremedia.blueprint.perfectchef.DEVICE_DESKTOP) {</p><p>      coremedia.blueprint.perfectchef.setMegaMenuItemsWidth();</p><p>    }</p><p>    // on desktop and tablet</p><p>    if (coremedia.blueprint.deviceDetector.getLastDevice().type == coremedia.blueprint.perfectchef.DEVICE_DESKTOP</p><p>            || coremedia.blueprint.deviceDetector.getLastDevice().type == coremedia.blueprint.perfectchef.DEVICE_TABLET) {</p><p>      coremedia.blueprint.perfectchef.setMarketingSpotItemsHeight();</p><p>    }</p><p>    isLayoutInProgress = false;</p><p>  };</p><p>  $document.on(coremedia.blueprint.basic.EVENT_LAYOUT_CHANGED, function () {</p><p>    if (!isLayoutInProgress) {</p><p>      setTimeout(layout, 500);</p><p>    }</p><p>    isLayoutInProgress = true;</p><p>  });</p><p>});</p></div></code>
<ieExpression></ieExpression>
<include>
</include>
<dataUrl></dataUrl>
</CMJavaScript>
