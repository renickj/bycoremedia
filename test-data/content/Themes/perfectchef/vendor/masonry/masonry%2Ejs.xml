<?xml version="1.0" encoding="UTF-8" ?>
<CMJavaScript folder="/Themes/perfectchef/vendor/masonry" name="masonry.js" xmlns:cmexport="http://www.coremedia.com/2012/cmexport">
<locale></locale>
<master>
</master>
<description></description>
<code grammarName="coremedia-richtext-1.0"><div xmlns="http://www.coremedia.com/2003/richtext-1.0" xmlns:xlink="http://www.w3.org/1999/xlink"><p>/*!</p><p> * Masonry PACKAGED v3.1.5</p><p> * Cascading grid layout library</p><p> * http://masonry.desandro.com</p><p> * MIT License</p><p> * by David DeSandro</p><p> */</p><p>/**</p><p> * Bridget makes jQuery widgets</p><p> * v1.0.1</p><p> */</p><p>( function( window ) {</p><p>// -------------------------- utils -------------------------- //</p><p>var slice = Array.prototype.slice;</p><p>function noop() {}</p><p>// -------------------------- definition -------------------------- //</p><p>function defineBridget( $ ) {</p><p>// bail if no jQuery</p><p>if ( !$ ) {</p><p>  return;</p><p>}</p><p>// -------------------------- addOptionMethod -------------------------- //</p><p>/**</p><p> * adds option method -&gt; $().plugin('option', {...})</p><p> * @param {Function} PluginClass - constructor class</p><p> */</p><p>function addOptionMethod( PluginClass ) {</p><p>  // don't overwrite original option method</p><p>  if ( PluginClass.prototype.option ) {</p><p>    return;</p><p>  }</p><p>  // option setter</p><p>  PluginClass.prototype.option = function( opts ) {</p><p>    // bail out if not an object</p><p>    if ( !$.isPlainObject( opts ) ){</p><p>      return;</p><p>    }</p><p>    this.options = $.extend( true, this.options, opts );</p><p>  };</p><p>}</p><p>// -------------------------- plugin bridge -------------------------- //</p><p>// helper function for logging errors</p><p>// $.error breaks jQuery chaining</p><p>var logError = typeof console === 'undefined' ? noop :</p><p>  function( message ) {</p><p>    console.error( message );</p><p>  };</p><p>/**</p><p> * jQuery plugin bridge, access methods like $elem.plugin('method')</p><p> * @param {String} namespace - plugin name</p><p> * @param {Function} PluginClass - constructor class</p><p> */</p><p>function bridge( namespace, PluginClass ) {</p><p>  // add to jQuery fn namespace</p><p>  $.fn[ namespace ] = function( options ) {</p><p>    if ( typeof options === 'string' ) {</p><p>      // call plugin method when first argument is a string</p><p>      // get arguments for method</p><p>      var args = slice.call( arguments, 1 );</p><p>      for ( var i=0, len = this.length; i &lt; len; i++ ) {</p><p>        var elem = this[i];</p><p>        var instance = $.data( elem, namespace );</p><p>        if ( !instance ) {</p><p>          logError( "cannot call methods on " + namespace + " prior to initialization; " +</p><p>            "attempted to call '" + options + "'" );</p><p>          continue;</p><p>        }</p><p>        if ( !$.isFunction( instance[options] ) || options.charAt(0) === '_' ) {</p><p>          logError( "no such method '" + options + "' for " + namespace + " instance" );</p><p>          continue;</p><p>        }</p><p>        // trigger method with arguments</p><p>        var returnValue = instance[ options ].apply( instance, args );</p><p>        // break look and return first value if provided</p><p>        if ( returnValue !== undefined ) {</p><p>          return returnValue;</p><p>        }</p><p>      }</p><p>      // return this if no return value</p><p>      return this;</p><p>    } else {</p><p>      return this.each( function() {</p><p>        var instance = $.data( this, namespace );</p><p>        if ( instance ) {</p><p>          // apply options &amp; init</p><p>          instance.option( options );</p><p>          instance._init();</p><p>        } else {</p><p>          // initialize new instance</p><p>          instance = new PluginClass( this, options );</p><p>          $.data( this, namespace, instance );</p><p>        }</p><p>      });</p><p>    }</p><p>  };</p><p>}</p><p>// -------------------------- bridget -------------------------- //</p><p>/**</p><p> * converts a Prototypical class into a proper jQuery plugin</p><p> *   the class must have a ._init method</p><p> * @param {String} namespace - plugin name, used in $().pluginName</p><p> * @param {Function} PluginClass - constructor class</p><p> */</p><p>$.bridget = function( namespace, PluginClass ) {</p><p>  addOptionMethod( PluginClass );</p><p>  bridge( namespace, PluginClass );</p><p>};</p><p>return $.bridget;</p><p>}</p><p>// transport</p><p>if ( typeof define === 'function' &amp;&amp; define.amd ) {</p><p>  // AMD</p><p>  define( 'jquery-bridget/jquery.bridget',[ 'jquery' ], defineBridget );</p><p>} else {</p><p>  // get jquery from browser global</p><p>  defineBridget( window.jQuery );</p><p>}</p><p>})( window );</p><p>/*!</p><p> * eventie v1.0.5</p><p> * event binding helper</p><p> *   eventie.bind( elem, 'click', myFn )</p><p> *   eventie.unbind( elem, 'click', myFn )</p><p> * MIT license</p><p> */</p><p>/*jshint browser: true, undef: true, unused: true */</p><p>/*global define: false, module: false */</p><p>( function( window ) {</p><p>var docElem = document.documentElement;</p><p>var bind = function() {};</p><p>function getIEEvent( obj ) {</p><p>  var event = window.event;</p><p>  // add event.target</p><p>  event.target = event.target || event.srcElement || obj;</p><p>  return event;</p><p>}</p><p>if ( docElem.addEventListener ) {</p><p>  bind = function( obj, type, fn ) {</p><p>    obj.addEventListener( type, fn, false );</p><p>  };</p><p>} else if ( docElem.attachEvent ) {</p><p>  bind = function( obj, type, fn ) {</p><p>    obj[ type + fn ] = fn.handleEvent ?</p><p>      function() {</p><p>        var event = getIEEvent( obj );</p><p>        fn.handleEvent.call( fn, event );</p><p>      } :</p><p>      function() {</p><p>        var event = getIEEvent( obj );</p><p>        fn.call( obj, event );</p><p>      };</p><p>    obj.attachEvent( "on" + type, obj[ type + fn ] );</p><p>  };</p><p>}</p><p>var unbind = function() {};</p><p>if ( docElem.removeEventListener ) {</p><p>  unbind = function( obj, type, fn ) {</p><p>    obj.removeEventListener( type, fn, false );</p><p>  };</p><p>} else if ( docElem.detachEvent ) {</p><p>  unbind = function( obj, type, fn ) {</p><p>    obj.detachEvent( "on" + type, obj[ type + fn ] );</p><p>    try {</p><p>      delete obj[ type + fn ];</p><p>    } catch ( err ) {</p><p>      // can't delete window object properties</p><p>      obj[ type + fn ] = undefined;</p><p>    }</p><p>  };</p><p>}</p><p>var eventie = {</p><p>  bind: bind,</p><p>  unbind: unbind</p><p>};</p><p>// ----- module definition ----- //</p><p>if ( typeof define === 'function' &amp;&amp; define.amd ) {</p><p>  // AMD</p><p>  define( 'eventie/eventie',eventie );</p><p>} else if ( typeof exports === 'object' ) {</p><p>  // CommonJS</p><p>  module.exports = eventie;</p><p>} else {</p><p>  // browser global</p><p>  window.eventie = eventie;</p><p>}</p><p>})( this );</p><p>/*!</p><p> * docReady</p><p> * Cross browser DOMContentLoaded event emitter</p><p> */</p><p>/*jshint browser: true, strict: true, undef: true, unused: true*/</p><p>/*global define: false */</p><p>( function( window ) {</p><p>var document = window.document;</p><p>// collection of functions to be triggered on ready</p><p>var queue = [];</p><p>function docReady( fn ) {</p><p>  // throw out non-functions</p><p>  if ( typeof fn !== 'function' ) {</p><p>    return;</p><p>  }</p><p>  if ( docReady.isReady ) {</p><p>    // ready now, hit it</p><p>    fn();</p><p>  } else {</p><p>    // queue function when ready</p><p>    queue.push( fn );</p><p>  }</p><p>}</p><p>docReady.isReady = false;</p><p>// triggered on various doc ready events</p><p>function init( event ) {</p><p>  // bail if IE8 document is not ready just yet</p><p>  var isIE8NotReady = event.type === 'readystatechange' &amp;&amp; document.readyState !== 'complete';</p><p>  if ( docReady.isReady || isIE8NotReady ) {</p><p>    return;</p><p>  }</p><p>  docReady.isReady = true;</p><p>  // process queue</p><p>  for ( var i=0, len = queue.length; i &lt; len; i++ ) {</p><p>    var fn = queue[i];</p><p>    fn();</p><p>  }</p><p>}</p><p>function defineDocReady( eventie ) {</p><p>  eventie.bind( document, 'DOMContentLoaded', init );</p><p>  eventie.bind( document, 'readystatechange', init );</p><p>  eventie.bind( window, 'load', init );</p><p>  return docReady;</p><p>}</p><p>// transport</p><p>if ( typeof define === 'function' &amp;&amp; define.amd ) {</p><p>  // AMD</p><p>  // if RequireJS, then doc is already ready</p><p>  docReady.isReady = typeof requirejs === 'function';</p><p>  define( 'doc-ready/doc-ready',[ 'eventie/eventie' ], defineDocReady );</p><p>} else {</p><p>  // browser global</p><p>  window.docReady = defineDocReady( window.eventie );</p><p>}</p><p>})( this );</p><p>/*!</p><p> * EventEmitter v4.2.7 - git.io/ee</p><p> * Oliver Caldwell</p><p> * MIT license</p><p> * @preserve</p><p> */</p><p>(function () {</p><p>	/**</p><p>	 * Class for managing events.</p><p>	 * Can be extended to provide event functionality in other classes.</p><p>	 *</p><p>	 * @class EventEmitter Manages event registering and emitting.</p><p>	 */</p><p>	function EventEmitter() {}</p><p>	// Shortcuts to improve speed and size</p><p>	var proto = EventEmitter.prototype;</p><p>	var exports = this;</p><p>	var originalGlobalValue = exports.EventEmitter;</p><p>	/**</p><p>	 * Finds the index of the listener for the event in it's storage array.</p><p>	 *</p><p>	 * @param {Function[]} listeners Array of listeners to search through.</p><p>	 * @param {Function} listener Method to look for.</p><p>	 * @return {Number} Index of the specified listener, -1 if not found</p><p>	 * @api private</p><p>	 */</p><p>	function indexOfListener(listeners, listener) {</p><p>		var i = listeners.length;</p><p>		while (i--) {</p><p>			if (listeners[i].listener === listener) {</p><p>				return i;</p><p>			}</p><p>		}</p><p>		return -1;</p><p>	}</p><p>	/**</p><p>	 * Alias a method while keeping the context correct, to allow for overwriting of target method.</p><p>	 *</p><p>	 * @param {String} name The name of the target method.</p><p>	 * @return {Function} The aliased method</p><p>	 * @api private</p><p>	 */</p><p>	function alias(name) {</p><p>		return function aliasClosure() {</p><p>			return this[name].apply(this, arguments);</p><p>		};</p><p>	}</p><p>	/**</p><p>	 * Returns the listener array for the specified event.</p><p>	 * Will initialise the event object and listener arrays if required.</p><p>	 * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.</p><p>	 * Each property in the object response is an array of listener functions.</p><p>	 *</p><p>	 * @param {String|RegExp} evt Name of the event to return the listeners from.</p><p>	 * @return {Function[]|Object} All listener functions for the event.</p><p>	 */</p><p>	proto.getListeners = function getListeners(evt) {</p><p>		var events = this._getEvents();</p><p>		var response;</p><p>		var key;</p><p>		// Return a concatenated array of all matching events if</p><p>		// the selector is a regular expression.</p><p>		if (evt instanceof RegExp) {</p><p>			response = {};</p><p>			for (key in events) {</p><p>				if (events.hasOwnProperty(key) &amp;&amp; evt.test(key)) {</p><p>					response[key] = events[key];</p><p>				}</p><p>			}</p><p>		}</p><p>		else {</p><p>			response = events[evt] || (events[evt] = []);</p><p>		}</p><p>		return response;</p><p>	};</p><p>	/**</p><p>	 * Takes a list of listener objects and flattens it into a list of listener functions.</p><p>	 *</p><p>	 * @param {Object[]} listeners Raw listener objects.</p><p>	 * @return {Function[]} Just the listener functions.</p><p>	 */</p><p>	proto.flattenListeners = function flattenListeners(listeners) {</p><p>		var flatListeners = [];</p><p>		var i;</p><p>		for (i = 0; i &lt; listeners.length; i += 1) {</p><p>			flatListeners.push(listeners[i].listener);</p><p>		}</p><p>		return flatListeners;</p><p>	};</p><p>	/**</p><p>	 * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.</p><p>	 *</p><p>	 * @param {String|RegExp} evt Name of the event to return the listeners from.</p><p>	 * @return {Object} All listener functions for an event in an object.</p><p>	 */</p><p>	proto.getListenersAsObject = function getListenersAsObject(evt) {</p><p>		var listeners = this.getListeners(evt);</p><p>		var response;</p><p>		if (listeners instanceof Array) {</p><p>			response = {};</p><p>			response[evt] = listeners;</p><p>		}</p><p>		return response || listeners;</p><p>	};</p><p>	/**</p><p>	 * Adds a listener function to the specified event.</p><p>	 * The listener will not be added if it is a duplicate.</p><p>	 * If the listener returns true then it will be removed after it is called.</p><p>	 * If you pass a regular expression as the event name then the listener will be added to all events that match it.</p><p>	 *</p><p>	 * @param {String|RegExp} evt Name of the event to attach the listener to.</p><p>	 * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.</p><p>	 * @return {Object} Current instance of EventEmitter for chaining.</p><p>	 */</p><p>	proto.addListener = function addListener(evt, listener) {</p><p>		var listeners = this.getListenersAsObject(evt);</p><p>		var listenerIsWrapped = typeof listener === 'object';</p><p>		var key;</p><p>		for (key in listeners) {</p><p>			if (listeners.hasOwnProperty(key) &amp;&amp; indexOfListener(listeners[key], listener) === -1) {</p><p>				listeners[key].push(listenerIsWrapped ? listener : {</p><p>					listener: listener,</p><p>					once: false</p><p>				});</p><p>			}</p><p>		}</p><p>		return this;</p><p>	};</p><p>	/**</p><p>	 * Alias of addListener</p><p>	 */</p><p>	proto.on = alias('addListener');</p><p>	/**</p><p>	 * Semi-alias of addListener. It will add a listener that will be</p><p>	 * automatically removed after it's first execution.</p><p>	 *</p><p>	 * @param {String|RegExp} evt Name of the event to attach the listener to.</p><p>	 * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.</p><p>	 * @return {Object} Current instance of EventEmitter for chaining.</p><p>	 */</p><p>	proto.addOnceListener = function addOnceListener(evt, listener) {</p><p>		return this.addListener(evt, {</p><p>			listener: listener,</p><p>			once: true</p><p>		});</p><p>	};</p><p>	/**</p><p>	 * Alias of addOnceListener.</p><p>	 */</p><p>	proto.once = alias('addOnceListener');</p><p>	/**</p><p>	 * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.</p><p>	 * You need to tell it what event names should be matched by a regex.</p><p>	 *</p><p>	 * @param {String} evt Name of the event to create.</p><p>	 * @return {Object} Current instance of EventEmitter for chaining.</p><p>	 */</p><p>	proto.defineEvent = function defineEvent(evt) {</p><p>		this.getListeners(evt);</p><p>		return this;</p><p>	};</p><p>	/**</p><p>	 * Uses defineEvent to define multiple events.</p><p>	 *</p><p>	 * @param {String[]} evts An array of event names to define.</p><p>	 * @return {Object} Current instance of EventEmitter for chaining.</p><p>	 */</p><p>	proto.defineEvents = function defineEvents(evts) {</p><p>		for (var i = 0; i &lt; evts.length; i += 1) {</p><p>			this.defineEvent(evts[i]);</p><p>		}</p><p>		return this;</p><p>	};</p><p>	/**</p><p>	 * Removes a listener function from the specified event.</p><p>	 * When passed a regular expression as the event name, it will remove the listener from all events that match it.</p><p>	 *</p><p>	 * @param {String|RegExp} evt Name of the event to remove the listener from.</p><p>	 * @param {Function} listener Method to remove from the event.</p><p>	 * @return {Object} Current instance of EventEmitter for chaining.</p><p>	 */</p><p>	proto.removeListener = function removeListener(evt, listener) {</p><p>		var listeners = this.getListenersAsObject(evt);</p><p>		var index;</p><p>		var key;</p><p>		for (key in listeners) {</p><p>			if (listeners.hasOwnProperty(key)) {</p><p>				index = indexOfListener(listeners[key], listener);</p><p>				if (index !== -1) {</p><p>					listeners[key].splice(index, 1);</p><p>				}</p><p>			}</p><p>		}</p><p>		return this;</p><p>	};</p><p>	/**</p><p>	 * Alias of removeListener</p><p>	 */</p><p>	proto.off = alias('removeListener');</p><p>	/**</p><p>	 * Adds listeners in bulk using the manipulateListeners method.</p><p>	 * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.</p><p>	 * You can also pass it a regular expression to add the array of listeners to all events that match it.</p><p>	 * Yeah, this function does quite a bit. That's probably a bad thing.</p><p>	 *</p><p>	 * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.</p><p>	 * @param {Function[]} [listeners] An optional array of listener functions to add.</p><p>	 * @return {Object} Current instance of EventEmitter for chaining.</p><p>	 */</p><p>	proto.addListeners = function addListeners(evt, listeners) {</p><p>		// Pass through to manipulateListeners</p><p>		return this.manipulateListeners(false, evt, listeners);</p><p>	};</p><p>	/**</p><p>	 * Removes listeners in bulk using the manipulateListeners method.</p><p>	 * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.</p><p>	 * You can also pass it an event name and an array of listeners to be removed.</p><p>	 * You can also pass it a regular expression to remove the listeners from all events that match it.</p><p>	 *</p><p>	 * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.</p><p>	 * @param {Function[]} [listeners] An optional array of listener functions to remove.</p><p>	 * @return {Object} Current instance of EventEmitter for chaining.</p><p>	 */</p><p>	proto.removeListeners = function removeListeners(evt, listeners) {</p><p>		// Pass through to manipulateListeners</p><p>		return this.manipulateListeners(true, evt, listeners);</p><p>	};</p><p>	/**</p><p>	 * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.</p><p>	 * The first argument will determine if the listeners are removed (true) or added (false).</p><p>	 * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.</p><p>	 * You can also pass it an event name and an array of listeners to be added/removed.</p><p>	 * You can also pass it a regular expression to manipulate the listeners of all events that match it.</p><p>	 *</p><p>	 * @param {Boolean} remove True if you want to remove listeners, false if you want to add.</p><p>	 * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.</p><p>	 * @param {Function[]} [listeners] An optional array of listener functions to add/remove.</p><p>	 * @return {Object} Current instance of EventEmitter for chaining.</p><p>	 */</p><p>	proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {</p><p>		var i;</p><p>		var value;</p><p>		var single = remove ? this.removeListener : this.addListener;</p><p>		var multiple = remove ? this.removeListeners : this.addListeners;</p><p>		// If evt is an object then pass each of it's properties to this method</p><p>		if (typeof evt === 'object' &amp;&amp; !(evt instanceof RegExp)) {</p><p>			for (i in evt) {</p><p>				if (evt.hasOwnProperty(i) &amp;&amp; (value = evt[i])) {</p><p>					// Pass the single listener straight through to the singular method</p><p>					if (typeof value === 'function') {</p><p>						single.call(this, i, value);</p><p>					}</p><p>					else {</p><p>						// Otherwise pass back to the multiple function</p><p>						multiple.call(this, i, value);</p><p>					}</p><p>				}</p><p>			}</p><p>		}</p><p>		else {</p><p>			// So evt must be a string</p><p>			// And listeners must be an array of listeners</p><p>			// Loop over it and pass each one to the multiple method</p><p>			i = listeners.length;</p><p>			while (i--) {</p><p>				single.call(this, evt, listeners[i]);</p><p>			}</p><p>		}</p><p>		return this;</p><p>	};</p><p>	/**</p><p>	 * Removes all listeners from a specified event.</p><p>	 * If you do not specify an event then all listeners will be removed.</p><p>	 * That means every event will be emptied.</p><p>	 * You can also pass a regex to remove all events that match it.</p><p>	 *</p><p>	 * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.</p><p>	 * @return {Object} Current instance of EventEmitter for chaining.</p><p>	 */</p><p>	proto.removeEvent = function removeEvent(evt) {</p><p>		var type = typeof evt;</p><p>		var events = this._getEvents();</p><p>		var key;</p><p>		// Remove different things depending on the state of evt</p><p>		if (type === 'string') {</p><p>			// Remove all listeners for the specified event</p><p>			delete events[evt];</p><p>		}</p><p>		else if (evt instanceof RegExp) {</p><p>			// Remove all events matching the regex.</p><p>			for (key in events) {</p><p>				if (events.hasOwnProperty(key) &amp;&amp; evt.test(key)) {</p><p>					delete events[key];</p><p>				}</p><p>			}</p><p>		}</p><p>		else {</p><p>			// Remove all listeners in all events</p><p>			delete this._events;</p><p>		}</p><p>		return this;</p><p>	};</p><p>	/**</p><p>	 * Alias of removeEvent.</p><p>	 *</p><p>	 * Added to mirror the node API.</p><p>	 */</p><p>	proto.removeAllListeners = alias('removeEvent');</p><p>	/**</p><p>	 * Emits an event of your choice.</p><p>	 * When emitted, every listener attached to that event will be executed.</p><p>	 * If you pass the optional argument array then those arguments will be passed to every listener upon execution.</p><p>	 * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.</p><p>	 * So they will not arrive within the array on the other side, they will be separate.</p><p>	 * You can also pass a regular expression to emit to all events that match it.</p><p>	 *</p><p>	 * @param {String|RegExp} evt Name of the event to emit and execute listeners for.</p><p>	 * @param {Array} [args] Optional array of arguments to be passed to each listener.</p><p>	 * @return {Object} Current instance of EventEmitter for chaining.</p><p>	 */</p><p>	proto.emitEvent = function emitEvent(evt, args) {</p><p>		var listeners = this.getListenersAsObject(evt);</p><p>		var listener;</p><p>		var i;</p><p>		var key;</p><p>		var response;</p><p>		for (key in listeners) {</p><p>			if (listeners.hasOwnProperty(key)) {</p><p>				i = listeners[key].length;</p><p>				while (i--) {</p><p>					// If the listener returns true then it shall be removed from the event</p><p>					// The function is executed either with a basic call or an apply if there is an args array</p><p>					listener = listeners[key][i];</p><p>					if (listener.once === true) {</p><p>						this.removeListener(evt, listener.listener);</p><p>					}</p><p>					response = listener.listener.apply(this, args || []);</p><p>					if (response === this._getOnceReturnValue()) {</p><p>						this.removeListener(evt, listener.listener);</p><p>					}</p><p>				}</p><p>			}</p><p>		}</p><p>		return this;</p><p>	};</p><p>	/**</p><p>	 * Alias of emitEvent</p><p>	 */</p><p>	proto.trigger = alias('emitEvent');</p><p>	/**</p><p>	 * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.</p><p>	 * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.</p><p>	 *</p><p>	 * @param {String|RegExp} evt Name of the event to emit and execute listeners for.</p><p>	 * @param {...*} Optional additional arguments to be passed to each listener.</p><p>	 * @return {Object} Current instance of EventEmitter for chaining.</p><p>	 */</p><p>	proto.emit = function emit(evt) {</p><p>		var args = Array.prototype.slice.call(arguments, 1);</p><p>		return this.emitEvent(evt, args);</p><p>	};</p><p>	/**</p><p>	 * Sets the current value to check against when executing listeners. If a</p><p>	 * listeners return value matches the one set here then it will be removed</p><p>	 * after execution. This value defaults to true.</p><p>	 *</p><p>	 * @param {*} value The new value to check for when executing listeners.</p><p>	 * @return {Object} Current instance of EventEmitter for chaining.</p><p>	 */</p><p>	proto.setOnceReturnValue = function setOnceReturnValue(value) {</p><p>		this._onceReturnValue = value;</p><p>		return this;</p><p>	};</p><p>	/**</p><p>	 * Fetches the current value to check against when executing listeners. If</p><p>	 * the listeners return value matches this one then it should be removed</p><p>	 * automatically. It will return true by default.</p><p>	 *</p><p>	 * @return {*|Boolean} The current value to check for or the default, true.</p><p>	 * @api private</p><p>	 */</p><p>	proto._getOnceReturnValue = function _getOnceReturnValue() {</p><p>		if (this.hasOwnProperty('_onceReturnValue')) {</p><p>			return this._onceReturnValue;</p><p>		}</p><p>		else {</p><p>			return true;</p><p>		}</p><p>	};</p><p>	/**</p><p>	 * Fetches the events object and creates one if required.</p><p>	 *</p><p>	 * @return {Object} The events storage object.</p><p>	 * @api private</p><p>	 */</p><p>	proto._getEvents = function _getEvents() {</p><p>		return this._events || (this._events = {});</p><p>	};</p><p>	/**</p><p>	 * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.</p><p>	 *</p><p>	 * @return {Function} Non conflicting EventEmitter class.</p><p>	 */</p><p>	EventEmitter.noConflict = function noConflict() {</p><p>		exports.EventEmitter = originalGlobalValue;</p><p>		return EventEmitter;</p><p>	};</p><p>	// Expose the class either via AMD, CommonJS or the global object</p><p>	if (typeof define === 'function' &amp;&amp; define.amd) {</p><p>		define('eventEmitter/EventEmitter',[],function () {</p><p>			return EventEmitter;</p><p>		});</p><p>	}</p><p>	else if (typeof module === 'object' &amp;&amp; module.exports){</p><p>		module.exports = EventEmitter;</p><p>	}</p><p>	else {</p><p>		this.EventEmitter = EventEmitter;</p><p>	}</p><p>}.call(this));</p><p>/*!</p><p> * getStyleProperty v1.0.3</p><p> * original by kangax</p><p> * http://perfectionkills.com/feature-testing-css-properties/</p><p> */</p><p>/*jshint browser: true, strict: true, undef: true */</p><p>/*global define: false, exports: false, module: false */</p><p>( function( window ) {</p><p>var prefixes = 'Webkit Moz ms Ms O'.split(' ');</p><p>var docElemStyle = document.documentElement.style;</p><p>function getStyleProperty( propName ) {</p><p>  if ( !propName ) {</p><p>    return;</p><p>  }</p><p>  // test standard property first</p><p>  if ( typeof docElemStyle[ propName ] === 'string' ) {</p><p>    return propName;</p><p>  }</p><p>  // capitalize</p><p>  propName = propName.charAt(0).toUpperCase() + propName.slice(1);</p><p>  // test vendor specific properties</p><p>  var prefixed;</p><p>  for ( var i=0, len = prefixes.length; i &lt; len; i++ ) {</p><p>    prefixed = prefixes[i] + propName;</p><p>    if ( typeof docElemStyle[ prefixed ] === 'string' ) {</p><p>      return prefixed;</p><p>    }</p><p>  }</p><p>}</p><p>// transport</p><p>if ( typeof define === 'function' &amp;&amp; define.amd ) {</p><p>  // AMD</p><p>  define( 'get-style-property/get-style-property',[],function() {</p><p>    return getStyleProperty;</p><p>  });</p><p>} else if ( typeof exports === 'object' ) {</p><p>  // CommonJS for Component</p><p>  module.exports = getStyleProperty;</p><p>} else {</p><p>  // browser global</p><p>  window.getStyleProperty = getStyleProperty;</p><p>}</p><p>})( window );</p><p>/**</p><p> * getSize v1.1.7</p><p> * measure size of elements</p><p> */</p><p>/*jshint browser: true, strict: true, undef: true, unused: true */</p><p>/*global define: false, exports: false, require: false, module: false */</p><p>( function( window, undefined ) {</p><p>// -------------------------- helpers -------------------------- //</p><p>var getComputedStyle = window.getComputedStyle;</p><p>var getStyle = getComputedStyle ?</p><p>  function( elem ) {</p><p>    return getComputedStyle( elem, null );</p><p>  } :</p><p>  function( elem ) {</p><p>    return elem.currentStyle;</p><p>  };</p><p>// get a number from a string, not a percentage</p><p>function getStyleSize( value ) {</p><p>  var num = parseFloat( value );</p><p>  // not a percent like '100%', and a number</p><p>  var isValid = value.indexOf('%') === -1 &amp;&amp; !isNaN( num );</p><p>  return isValid &amp;&amp; num;</p><p>}</p><p>// -------------------------- measurements -------------------------- //</p><p>var measurements = [</p><p>  'paddingLeft',</p><p>  'paddingRight',</p><p>  'paddingTop',</p><p>  'paddingBottom',</p><p>  'marginLeft',</p><p>  'marginRight',</p><p>  'marginTop',</p><p>  'marginBottom',</p><p>  'borderLeftWidth',</p><p>  'borderRightWidth',</p><p>  'borderTopWidth',</p><p>  'borderBottomWidth'</p><p>];</p><p>function getZeroSize() {</p><p>  var size = {</p><p>    width: 0,</p><p>    height: 0,</p><p>    innerWidth: 0,</p><p>    innerHeight: 0,</p><p>    outerWidth: 0,</p><p>    outerHeight: 0</p><p>  };</p><p>  for ( var i=0, len = measurements.length; i &lt; len; i++ ) {</p><p>    var measurement = measurements[i];</p><p>    size[ measurement ] = 0;</p><p>  }</p><p>  return size;</p><p>}</p><p>function defineGetSize( getStyleProperty ) {</p><p>// -------------------------- box sizing -------------------------- //</p><p>var boxSizingProp = getStyleProperty('boxSizing');</p><p>var isBoxSizeOuter;</p><p>/**</p><p> * WebKit measures the outer-width on style.width on border-box elems</p><p> * IE &amp; Firefox measures the inner-width</p><p> */</p><p>( function() {</p><p>  if ( !boxSizingProp ) {</p><p>    return;</p><p>  }</p><p>  var div = document.createElement('div');</p><p>  div.style.width = '200px';</p><p>  div.style.padding = '1px 2px 3px 4px';</p><p>  div.style.borderStyle = 'solid';</p><p>  div.style.borderWidth = '1px 2px 3px 4px';</p><p>  div.style[ boxSizingProp ] = 'border-box';</p><p>  var body = document.body || document.documentElement;</p><p>  body.appendChild( div );</p><p>  var style = getStyle( div );</p><p>  isBoxSizeOuter = getStyleSize( style.width ) === 200;</p><p>  body.removeChild( div );</p><p>})();</p><p>// -------------------------- getSize -------------------------- //</p><p>function getSize( elem ) {</p><p>  // use querySeletor if elem is string</p><p>  if ( typeof elem === 'string' ) {</p><p>    elem = document.querySelector( elem );</p><p>  }</p><p>  // do not proceed on non-objects</p><p>  if ( !elem || typeof elem !== 'object' || !elem.nodeType ) {</p><p>    return;</p><p>  }</p><p>  var style = getStyle( elem );</p><p>  // if hidden, everything is 0</p><p>  if ( style.display === 'none' ) {</p><p>    return getZeroSize();</p><p>  }</p><p>  var size = {};</p><p>  size.width = elem.offsetWidth;</p><p>  size.height = elem.offsetHeight;</p><p>  var isBorderBox = size.isBorderBox = !!( boxSizingProp &amp;&amp;</p><p>    style[ boxSizingProp ] &amp;&amp; style[ boxSizingProp ] === 'border-box' );</p><p>  // get all measurements</p><p>  for ( var i=0, len = measurements.length; i &lt; len; i++ ) {</p><p>    var measurement = measurements[i];</p><p>    var value = style[ measurement ];</p><p>    value = mungeNonPixel( elem, value );</p><p>    var num = parseFloat( value );</p><p>    // any 'auto', 'medium' value will be 0</p><p>    size[ measurement ] = !isNaN( num ) ? num : 0;</p><p>  }</p><p>  var paddingWidth = size.paddingLeft + size.paddingRight;</p><p>  var paddingHeight = size.paddingTop + size.paddingBottom;</p><p>  var marginWidth = size.marginLeft + size.marginRight;</p><p>  var marginHeight = size.marginTop + size.marginBottom;</p><p>  var borderWidth = size.borderLeftWidth + size.borderRightWidth;</p><p>  var borderHeight = size.borderTopWidth + size.borderBottomWidth;</p><p>  var isBorderBoxSizeOuter = isBorderBox &amp;&amp; isBoxSizeOuter;</p><p>  // overwrite width and height if we can get it from style</p><p>  var styleWidth = getStyleSize( style.width );</p><p>  if ( styleWidth !== false ) {</p><p>    size.width = styleWidth +</p><p>      // add padding and border unless it's already including it</p><p>      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );</p><p>  }</p><p>  var styleHeight = getStyleSize( style.height );</p><p>  if ( styleHeight !== false ) {</p><p>    size.height = styleHeight +</p><p>      // add padding and border unless it's already including it</p><p>      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );</p><p>  }</p><p>  size.innerWidth = size.width - ( paddingWidth + borderWidth );</p><p>  size.innerHeight = size.height - ( paddingHeight + borderHeight );</p><p>  size.outerWidth = size.width + marginWidth;</p><p>  size.outerHeight = size.height + marginHeight;</p><p>  return size;</p><p>}</p><p>// IE8 returns percent values, not pixels</p><p>// taken from jQuery's curCSS</p><p>function mungeNonPixel( elem, value ) {</p><p>  // IE8 and has percent value</p><p>  if ( getComputedStyle || value.indexOf('%') === -1 ) {</p><p>    return value;</p><p>  }</p><p>  var style = elem.style;</p><p>  // Remember the original values</p><p>  var left = style.left;</p><p>  var rs = elem.runtimeStyle;</p><p>  var rsLeft = rs &amp;&amp; rs.left;</p><p>  // Put in the new values to get a computed value out</p><p>  if ( rsLeft ) {</p><p>    rs.left = elem.currentStyle.left;</p><p>  }</p><p>  style.left = value;</p><p>  value = style.pixelLeft;</p><p>  // Revert the changed values</p><p>  style.left = left;</p><p>  if ( rsLeft ) {</p><p>    rs.left = rsLeft;</p><p>  }</p><p>  return value;</p><p>}</p><p>return getSize;</p><p>}</p><p>// transport</p><p>if ( typeof define === 'function' &amp;&amp; define.amd ) {</p><p>  // AMD for RequireJS</p><p>  define( 'get-size/get-size',[ 'get-style-property/get-style-property' ], defineGetSize );</p><p>} else if ( typeof exports === 'object' ) {</p><p>  // CommonJS for Component</p><p>  module.exports = defineGetSize( require('get-style-property') );</p><p>} else {</p><p>  // browser global</p><p>  window.getSize = defineGetSize( window.getStyleProperty );</p><p>}</p><p>})( window );</p><p>/**</p><p> * matchesSelector helper v1.0.1</p><p> *</p><p> * @name matchesSelector</p><p> *   @param {Element} elem</p><p> *   @param {String} selector</p><p> */</p><p>/*jshint browser: true, strict: true, undef: true, unused: true */</p><p>/*global define: false */</p><p>( function( global, ElemProto ) {</p><p>  var matchesMethod = ( function() {</p><p>    // check un-prefixed</p><p>    if ( ElemProto.matchesSelector ) {</p><p>      return 'matchesSelector';</p><p>    }</p><p>    // check vendor prefixes</p><p>    var prefixes = [ 'webkit', 'moz', 'ms', 'o' ];</p><p>    for ( var i=0, len = prefixes.length; i &lt; len; i++ ) {</p><p>      var prefix = prefixes[i];</p><p>      var method = prefix + 'MatchesSelector';</p><p>      if ( ElemProto[ method ] ) {</p><p>        return method;</p><p>      }</p><p>    }</p><p>  })();</p><p>  // ----- match ----- //</p><p>  function match( elem, selector ) {</p><p>    return elem[ matchesMethod ]( selector );</p><p>  }</p><p>  // ----- appendToFragment ----- //</p><p>  function checkParent( elem ) {</p><p>    // not needed if already has parent</p><p>    if ( elem.parentNode ) {</p><p>      return;</p><p>    }</p><p>    var fragment = document.createDocumentFragment();</p><p>    fragment.appendChild( elem );</p><p>  }</p><p>  // ----- query ----- //</p><p>  // fall back to using QSA</p><p>  // thx @jonathantneal https://gist.github.com/3062955</p><p>  function query( elem, selector ) {</p><p>    // append to fragment if no parent</p><p>    checkParent( elem );</p><p>    // match elem with all selected elems of parent</p><p>    var elems = elem.parentNode.querySelectorAll( selector );</p><p>    for ( var i=0, len = elems.length; i &lt; len; i++ ) {</p><p>      // return true if match</p><p>      if ( elems[i] === elem ) {</p><p>        return true;</p><p>      }</p><p>    }</p><p>    // otherwise return false</p><p>    return false;</p><p>  }</p><p>  // ----- matchChild ----- //</p><p>  function matchChild( elem, selector ) {</p><p>    checkParent( elem );</p><p>    return match( elem, selector );</p><p>  }</p><p>  // ----- matchesSelector ----- //</p><p>  var matchesSelector;</p><p>  if ( matchesMethod ) {</p><p>    // IE9 supports matchesSelector, but doesn't work on orphaned elems</p><p>    // check for that</p><p>    var div = document.createElement('div');</p><p>    var supportsOrphans = match( div, 'div' );</p><p>    matchesSelector = supportsOrphans ? match : matchChild;</p><p>  } else {</p><p>    matchesSelector = query;</p><p>  }</p><p>  // transport</p><p>  if ( typeof define === 'function' &amp;&amp; define.amd ) {</p><p>    // AMD</p><p>    define( 'matches-selector/matches-selector',[],function() {</p><p>      return matchesSelector;</p><p>    });</p><p>  } else {</p><p>    // browser global</p><p>    window.matchesSelector = matchesSelector;</p><p>  }</p><p>})( this, Element.prototype );</p><p>/**</p><p> * Outlayer Item</p><p> */</p><p>( function( window ) {</p><p>// ----- get style ----- //</p><p>var getComputedStyle = window.getComputedStyle;</p><p>var getStyle = getComputedStyle ?</p><p>  function( elem ) {</p><p>    return getComputedStyle( elem, null );</p><p>  } :</p><p>  function( elem ) {</p><p>    return elem.currentStyle;</p><p>  };</p><p>// extend objects</p><p>function extend( a, b ) {</p><p>  for ( var prop in b ) {</p><p>    a[ prop ] = b[ prop ];</p><p>  }</p><p>  return a;</p><p>}</p><p>function isEmptyObj( obj ) {</p><p>  for ( var prop in obj ) {</p><p>    return false;</p><p>  }</p><p>  prop = null;</p><p>  return true;</p><p>}</p><p>// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/</p><p>function toDash( str ) {</p><p>  return str.replace( /([A-Z])/g, function( $1 ){</p><p>    return '-' + $1.toLowerCase();</p><p>  });</p><p>}</p><p>// -------------------------- Outlayer definition -------------------------- //</p><p>function outlayerItemDefinition( EventEmitter, getSize, getStyleProperty ) {</p><p>// -------------------------- CSS3 support -------------------------- //</p><p>var transitionProperty = getStyleProperty('transition');</p><p>var transformProperty = getStyleProperty('transform');</p><p>var supportsCSS3 = transitionProperty &amp;&amp; transformProperty;</p><p>var is3d = !!getStyleProperty('perspective');</p><p>var transitionEndEvent = {</p><p>  WebkitTransition: 'webkitTransitionEnd',</p><p>  MozTransition: 'transitionend',</p><p>  OTransition: 'otransitionend',</p><p>  transition: 'transitionend'</p><p>}[ transitionProperty ];</p><p>// properties that could have vendor prefix</p><p>var prefixableProperties = [</p><p>  'transform',</p><p>  'transition',</p><p>  'transitionDuration',</p><p>  'transitionProperty'</p><p>];</p><p>// cache all vendor properties</p><p>var vendorProperties = ( function() {</p><p>  var cache = {};</p><p>  for ( var i=0, len = prefixableProperties.length; i &lt; len; i++ ) {</p><p>    var prop = prefixableProperties[i];</p><p>    var supportedProp = getStyleProperty( prop );</p><p>    if ( supportedProp &amp;&amp; supportedProp !== prop ) {</p><p>      cache[ prop ] = supportedProp;</p><p>    }</p><p>  }</p><p>  return cache;</p><p>})();</p><p>// -------------------------- Item -------------------------- //</p><p>function Item( element, layout ) {</p><p>  if ( !element ) {</p><p>    return;</p><p>  }</p><p>  this.element = element;</p><p>  // parent layout class, i.e. Masonry, Isotope, or Packery</p><p>  this.layout = layout;</p><p>  this.position = {</p><p>    x: 0,</p><p>    y: 0</p><p>  };</p><p>  this._create();</p><p>}</p><p>// inherit EventEmitter</p><p>extend( Item.prototype, EventEmitter.prototype );</p><p>Item.prototype._create = function() {</p><p>  // transition objects</p><p>  this._transn = {</p><p>    ingProperties: {},</p><p>    clean: {},</p><p>    onEnd: {}</p><p>  };</p><p>  this.css({</p><p>    position: 'absolute'</p><p>  });</p><p>};</p><p>// trigger specified handler for event type</p><p>Item.prototype.handleEvent = function( event ) {</p><p>  var method = 'on' + event.type;</p><p>  if ( this[ method ] ) {</p><p>    this[ method ]( event );</p><p>  }</p><p>};</p><p>Item.prototype.getSize = function() {</p><p>  this.size = getSize( this.element );</p><p>};</p><p>/**</p><p> * apply CSS styles to element</p><p> * @param {Object} style</p><p> */</p><p>Item.prototype.css = function( style ) {</p><p>  var elemStyle = this.element.style;</p><p>  for ( var prop in style ) {</p><p>    // use vendor property if available</p><p>    var supportedProp = vendorProperties[ prop ] || prop;</p><p>    elemStyle[ supportedProp ] = style[ prop ];</p><p>  }</p><p>};</p><p> // measure position, and sets it</p><p>Item.prototype.getPosition = function() {</p><p>  var style = getStyle( this.element );</p><p>  var layoutOptions = this.layout.options;</p><p>  var isOriginLeft = layoutOptions.isOriginLeft;</p><p>  var isOriginTop = layoutOptions.isOriginTop;</p><p>  var x = parseInt( style[ isOriginLeft ? 'left' : 'right' ], 10 );</p><p>  var y = parseInt( style[ isOriginTop ? 'top' : 'bottom' ], 10 );</p><p>  // clean up 'auto' or other non-integer values</p><p>  x = isNaN( x ) ? 0 : x;</p><p>  y = isNaN( y ) ? 0 : y;</p><p>  // remove padding from measurement</p><p>  var layoutSize = this.layout.size;</p><p>  x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;</p><p>  y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;</p><p>  this.position.x = x;</p><p>  this.position.y = y;</p><p>};</p><p>// set settled position, apply padding</p><p>Item.prototype.layoutPosition = function() {</p><p>  var layoutSize = this.layout.size;</p><p>  var layoutOptions = this.layout.options;</p><p>  var style = {};</p><p>  if ( layoutOptions.isOriginLeft ) {</p><p>    style.left = ( this.position.x + layoutSize.paddingLeft ) + 'px';</p><p>    // reset other property</p><p>    style.right = '';</p><p>  } else {</p><p>    style.right = ( this.position.x + layoutSize.paddingRight ) + 'px';</p><p>    style.left = '';</p><p>  }</p><p>  if ( layoutOptions.isOriginTop ) {</p><p>    style.top = ( this.position.y + layoutSize.paddingTop ) + 'px';</p><p>    style.bottom = '';</p><p>  } else {</p><p>    style.bottom = ( this.position.y + layoutSize.paddingBottom ) + 'px';</p><p>    style.top = '';</p><p>  }</p><p>  this.css( style );</p><p>  this.emitEvent( 'layout', [ this ] );</p><p>};</p><p>// transform translate function</p><p>var translate = is3d ?</p><p>  function( x, y ) {</p><p>    return 'translate3d(' + x + 'px, ' + y + 'px, 0)';</p><p>  } :</p><p>  function( x, y ) {</p><p>    return 'translate(' + x + 'px, ' + y + 'px)';</p><p>  };</p><p>Item.prototype._transitionTo = function( x, y ) {</p><p>  this.getPosition();</p><p>  // get current x &amp; y from top/left</p><p>  var curX = this.position.x;</p><p>  var curY = this.position.y;</p><p>  var compareX = parseInt( x, 10 );</p><p>  var compareY = parseInt( y, 10 );</p><p>  var didNotMove = compareX === this.position.x &amp;&amp; compareY === this.position.y;</p><p>  // save end position</p><p>  this.setPosition( x, y );</p><p>  // if did not move and not transitioning, just go to layout</p><p>  if ( didNotMove &amp;&amp; !this.isTransitioning ) {</p><p>    this.layoutPosition();</p><p>    return;</p><p>  }</p><p>  var transX = x - curX;</p><p>  var transY = y - curY;</p><p>  var transitionStyle = {};</p><p>  // flip cooridinates if origin on right or bottom</p><p>  var layoutOptions = this.layout.options;</p><p>  transX = layoutOptions.isOriginLeft ? transX : -transX;</p><p>  transY = layoutOptions.isOriginTop ? transY : -transY;</p><p>  transitionStyle.transform = translate( transX, transY );</p><p>  this.transition({</p><p>    to: transitionStyle,</p><p>    onTransitionEnd: {</p><p>      transform: this.layoutPosition</p><p>    },</p><p>    isCleaning: true</p><p>  });</p><p>};</p><p>// non transition + transform support</p><p>Item.prototype.goTo = function( x, y ) {</p><p>  this.setPosition( x, y );</p><p>  this.layoutPosition();</p><p>};</p><p>// use transition and transforms if supported</p><p>Item.prototype.moveTo = supportsCSS3 ?</p><p>  Item.prototype._transitionTo : Item.prototype.goTo;</p><p>Item.prototype.setPosition = function( x, y ) {</p><p>  this.position.x = parseInt( x, 10 );</p><p>  this.position.y = parseInt( y, 10 );</p><p>};</p><p>// ----- transition ----- //</p><p>/**</p><p> * @param {Object} style - CSS</p><p> * @param {Function} onTransitionEnd</p><p> */</p><p>// non transition, just trigger callback</p><p>Item.prototype._nonTransition = function( args ) {</p><p>  this.css( args.to );</p><p>  if ( args.isCleaning ) {</p><p>    this._removeStyles( args.to );</p><p>  }</p><p>  for ( var prop in args.onTransitionEnd ) {</p><p>    args.onTransitionEnd[ prop ].call( this );</p><p>  }</p><p>};</p><p>/**</p><p> * proper transition</p><p> * @param {Object} args - arguments</p><p> *   @param {Object} to - style to transition to</p><p> *   @param {Object} from - style to start transition from</p><p> *   @param {Boolean} isCleaning - removes transition styles after transition</p><p> *   @param {Function} onTransitionEnd - callback</p><p> */</p><p>Item.prototype._transition = function( args ) {</p><p>  // redirect to nonTransition if no transition duration</p><p>  if ( !parseFloat( this.layout.options.transitionDuration ) ) {</p><p>    this._nonTransition( args );</p><p>    return;</p><p>  }</p><p>  var _transition = this._transn;</p><p>  // keep track of onTransitionEnd callback by css property</p><p>  for ( var prop in args.onTransitionEnd ) {</p><p>    _transition.onEnd[ prop ] = args.onTransitionEnd[ prop ];</p><p>  }</p><p>  // keep track of properties that are transitioning</p><p>  for ( prop in args.to ) {</p><p>    _transition.ingProperties[ prop ] = true;</p><p>    // keep track of properties to clean up when transition is done</p><p>    if ( args.isCleaning ) {</p><p>      _transition.clean[ prop ] = true;</p><p>    }</p><p>  }</p><p>  // set from styles</p><p>  if ( args.from ) {</p><p>    this.css( args.from );</p><p>    // force redraw. http://blog.alexmaccaw.com/css-transitions</p><p>    var h = this.element.offsetHeight;</p><p>    // hack for JSHint to hush about unused var</p><p>    h = null;</p><p>  }</p><p>  // enable transition</p><p>  this.enableTransition( args.to );</p><p>  // set styles that are transitioning</p><p>  this.css( args.to );</p><p>  this.isTransitioning = true;</p><p>};</p><p>var itemTransitionProperties = transformProperty &amp;&amp; ( toDash( transformProperty ) +</p><p>  ',opacity' );</p><p>Item.prototype.enableTransition = function(/* style */) {</p><p>  // only enable if not already transitioning</p><p>  // bug in IE10 were re-setting transition style will prevent</p><p>  // transitionend event from triggering</p><p>  if ( this.isTransitioning ) {</p><p>    return;</p><p>  }</p><p>  // make transition: foo, bar, baz from style object</p><p>  // TODO uncomment this bit when IE10 bug is resolved</p><p>  // var transitionValue = [];</p><p>  // for ( var prop in style ) {</p><p>  //   // dash-ify camelCased properties like WebkitTransition</p><p>  //   transitionValue.push( toDash( prop ) );</p><p>  // }</p><p>  // enable transition styles</p><p>  // HACK always enable transform,opacity for IE10</p><p>  this.css({</p><p>    transitionProperty: itemTransitionProperties,</p><p>    transitionDuration: this.layout.options.transitionDuration</p><p>  });</p><p>  // listen for transition end event</p><p>  this.element.addEventListener( transitionEndEvent, this, false );</p><p>};</p><p>Item.prototype.transition = Item.prototype[ transitionProperty ? '_transition' : '_nonTransition' ];</p><p>// ----- events ----- //</p><p>Item.prototype.onwebkitTransitionEnd = function( event ) {</p><p>  this.ontransitionend( event );</p><p>};</p><p>Item.prototype.onotransitionend = function( event ) {</p><p>  this.ontransitionend( event );</p><p>};</p><p>// properties that I munge to make my life easier</p><p>var dashedVendorProperties = {</p><p>  '-webkit-transform': 'transform',</p><p>  '-moz-transform': 'transform',</p><p>  '-o-transform': 'transform'</p><p>};</p><p>Item.prototype.ontransitionend = function( event ) {</p><p>  // disregard bubbled events from children</p><p>  if ( event.target !== this.element ) {</p><p>    return;</p><p>  }</p><p>  var _transition = this._transn;</p><p>  // get property name of transitioned property, convert to prefix-free</p><p>  var propertyName = dashedVendorProperties[ event.propertyName ] || event.propertyName;</p><p>  // remove property that has completed transitioning</p><p>  delete _transition.ingProperties[ propertyName ];</p><p>  // check if any properties are still transitioning</p><p>  if ( isEmptyObj( _transition.ingProperties ) ) {</p><p>    // all properties have completed transitioning</p><p>    this.disableTransition();</p><p>  }</p><p>  // clean style</p><p>  if ( propertyName in _transition.clean ) {</p><p>    // clean up style</p><p>    this.element.style[ event.propertyName ] = '';</p><p>    delete _transition.clean[ propertyName ];</p><p>  }</p><p>  // trigger onTransitionEnd callback</p><p>  if ( propertyName in _transition.onEnd ) {</p><p>    var onTransitionEnd = _transition.onEnd[ propertyName ];</p><p>    onTransitionEnd.call( this );</p><p>    delete _transition.onEnd[ propertyName ];</p><p>  }</p><p>  this.emitEvent( 'transitionEnd', [ this ] );</p><p>};</p><p>Item.prototype.disableTransition = function() {</p><p>  this.removeTransitionStyles();</p><p>  this.element.removeEventListener( transitionEndEvent, this, false );</p><p>  this.isTransitioning = false;</p><p>};</p><p>/**</p><p> * removes style property from element</p><p> * @param {Object} style</p><p>**/</p><p>Item.prototype._removeStyles = function( style ) {</p><p>  // clean up transition styles</p><p>  var cleanStyle = {};</p><p>  for ( var prop in style ) {</p><p>    cleanStyle[ prop ] = '';</p><p>  }</p><p>  this.css( cleanStyle );</p><p>};</p><p>var cleanTransitionStyle = {</p><p>  transitionProperty: '',</p><p>  transitionDuration: ''</p><p>};</p><p>Item.prototype.removeTransitionStyles = function() {</p><p>  // remove transition</p><p>  this.css( cleanTransitionStyle );</p><p>};</p><p>// ----- show/hide/remove ----- //</p><p>// remove element from DOM</p><p>Item.prototype.removeElem = function() {</p><p>  this.element.parentNode.removeChild( this.element );</p><p>  this.emitEvent( 'remove', [ this ] );</p><p>};</p><p>Item.prototype.remove = function() {</p><p>  // just remove element if no transition support or no transition</p><p>  if ( !transitionProperty || !parseFloat( this.layout.options.transitionDuration ) ) {</p><p>    this.removeElem();</p><p>    return;</p><p>  }</p><p>  // start transition</p><p>  var _this = this;</p><p>  this.on( 'transitionEnd', function() {</p><p>    _this.removeElem();</p><p>    return true; // bind once</p><p>  });</p><p>  this.hide();</p><p>};</p><p>Item.prototype.reveal = function() {</p><p>  delete this.isHidden;</p><p>  // remove display: none</p><p>  this.css({ display: '' });</p><p>  var options = this.layout.options;</p><p>  this.transition({</p><p>    from: options.hiddenStyle,</p><p>    to: options.visibleStyle,</p><p>    isCleaning: true</p><p>  });</p><p>};</p><p>Item.prototype.hide = function() {</p><p>  // set flag</p><p>  this.isHidden = true;</p><p>  // remove display: none</p><p>  this.css({ display: '' });</p><p>  var options = this.layout.options;</p><p>  this.transition({</p><p>    from: options.visibleStyle,</p><p>    to: options.hiddenStyle,</p><p>    // keep hidden stuff hidden</p><p>    isCleaning: true,</p><p>    onTransitionEnd: {</p><p>      opacity: function() {</p><p>        // check if still hidden</p><p>        // during transition, item may have been un-hidden</p><p>        if ( this.isHidden ) {</p><p>          this.css({ display: 'none' });</p><p>        }</p><p>      }</p><p>    }</p><p>  });</p><p>};</p><p>Item.prototype.destroy = function() {</p><p>  this.css({</p><p>    position: '',</p><p>    left: '',</p><p>    right: '',</p><p>    top: '',</p><p>    bottom: '',</p><p>    transition: '',</p><p>    transform: ''</p><p>  });</p><p>};</p><p>return Item;</p><p>}</p><p>// -------------------------- transport -------------------------- //</p><p>if ( typeof define === 'function' &amp;&amp; define.amd ) {</p><p>  // AMD</p><p>  define( 'outlayer/item',[</p><p>      'eventEmitter/EventEmitter',</p><p>      'get-size/get-size',</p><p>      'get-style-property/get-style-property'</p><p>    ],</p><p>    outlayerItemDefinition );</p><p>} else {</p><p>  // browser global</p><p>  window.Outlayer = {};</p><p>  window.Outlayer.Item = outlayerItemDefinition(</p><p>    window.EventEmitter,</p><p>    window.getSize,</p><p>    window.getStyleProperty</p><p>  );</p><p>}</p><p>})( window );</p><p>/*!</p><p> * Outlayer v1.2.0</p><p> * the brains and guts of a layout library</p><p> * MIT license</p><p> */</p><p>( function( window ) {</p><p>// ----- vars ----- //</p><p>var document = window.document;</p><p>var console = window.console;</p><p>var jQuery = window.jQuery;</p><p>var noop = function() {};</p><p>// -------------------------- helpers -------------------------- //</p><p>// extend objects</p><p>function extend( a, b ) {</p><p>  for ( var prop in b ) {</p><p>    a[ prop ] = b[ prop ];</p><p>  }</p><p>  return a;</p><p>}</p><p>var objToString = Object.prototype.toString;</p><p>function isArray( obj ) {</p><p>  return objToString.call( obj ) === '[object Array]';</p><p>}</p><p>// turn element or nodeList into an array</p><p>function makeArray( obj ) {</p><p>  var ary = [];</p><p>  if ( isArray( obj ) ) {</p><p>    // use object if already an array</p><p>    ary = obj;</p><p>  } else if ( obj &amp;&amp; typeof obj.length === 'number' ) {</p><p>    // convert nodeList to array</p><p>    for ( var i=0, len = obj.length; i &lt; len; i++ ) {</p><p>      ary.push( obj[i] );</p><p>    }</p><p>  } else {</p><p>    // array of single index</p><p>    ary.push( obj );</p><p>  }</p><p>  return ary;</p><p>}</p><p>// http://stackoverflow.com/a/384380/182183</p><p>var isElement = ( typeof HTMLElement === 'object' ) ?</p><p>  function isElementDOM2( obj ) {</p><p>    return obj instanceof HTMLElement;</p><p>  } :</p><p>  function isElementQuirky( obj ) {</p><p>    return obj &amp;&amp; typeof obj === 'object' &amp;&amp;</p><p>      obj.nodeType === 1 &amp;&amp; typeof obj.nodeName === 'string';</p><p>  };</p><p>// index of helper cause IE8</p><p>var indexOf = Array.prototype.indexOf ? function( ary, obj ) {</p><p>    return ary.indexOf( obj );</p><p>  } : function( ary, obj ) {</p><p>    for ( var i=0, len = ary.length; i &lt; len; i++ ) {</p><p>      if ( ary[i] === obj ) {</p><p>        return i;</p><p>      }</p><p>    }</p><p>    return -1;</p><p>  };</p><p>function removeFrom( obj, ary ) {</p><p>  var index = indexOf( ary, obj );</p><p>  if ( index !== -1 ) {</p><p>    ary.splice( index, 1 );</p><p>  }</p><p>}</p><p>// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/</p><p>function toDashed( str ) {</p><p>  return str.replace( /(.)([A-Z])/g, function( match, $1, $2 ) {</p><p>    return $1 + '-' + $2;</p><p>  }).toLowerCase();</p><p>}</p><p>function outlayerDefinition( eventie, docReady, EventEmitter, getSize, matchesSelector, Item ) {</p><p>// -------------------------- Outlayer -------------------------- //</p><p>// globally unique identifiers</p><p>var GUID = 0;</p><p>// internal store of all Outlayer intances</p><p>var instances = {};</p><p>/**</p><p> * @param {Element, String} element</p><p> * @param {Object} options</p><p> * @constructor</p><p> */</p><p>function Outlayer( element, options ) {</p><p>  // use element as selector string</p><p>  if ( typeof element === 'string' ) {</p><p>    element = document.querySelector( element );</p><p>  }</p><p>  // bail out if not proper element</p><p>  if ( !element || !isElement( element ) ) {</p><p>    if ( console ) {</p><p>      console.error( 'Bad ' + this.constructor.namespace + ' element: ' + element );</p><p>    }</p><p>    return;</p><p>  }</p><p>  this.element = element;</p><p>  // options</p><p>  this.options = extend( {}, this.constructor.defaults );</p><p>  this.option( options );</p><p>  // add id for Outlayer.getFromElement</p><p>  var id = ++GUID;</p><p>  this.element.outlayerGUID = id; // expando</p><p>  instances[ id ] = this; // associate via id</p><p>  // kick it off</p><p>  this._create();</p><p>  if ( this.options.isInitLayout ) {</p><p>    this.layout();</p><p>  }</p><p>}</p><p>// settings are for internal use only</p><p>Outlayer.namespace = 'outlayer';</p><p>Outlayer.Item = Item;</p><p>// default options</p><p>Outlayer.defaults = {</p><p>  containerStyle: {</p><p>    position: 'relative'</p><p>  },</p><p>  isInitLayout: true,</p><p>  isOriginLeft: true,</p><p>  isOriginTop: true,</p><p>  isResizeBound: true,</p><p>  isResizingContainer: true,</p><p>  // item options</p><p>  transitionDuration: '0.4s',</p><p>  hiddenStyle: {</p><p>    opacity: 0,</p><p>    transform: 'scale(0.001)'</p><p>  },</p><p>  visibleStyle: {</p><p>    opacity: 1,</p><p>    transform: 'scale(1)'</p><p>  }</p><p>};</p><p>// inherit EventEmitter</p><p>extend( Outlayer.prototype, EventEmitter.prototype );</p><p>/**</p><p> * set options</p><p> * @param {Object} opts</p><p> */</p><p>Outlayer.prototype.option = function( opts ) {</p><p>  extend( this.options, opts );</p><p>};</p><p>Outlayer.prototype._create = function() {</p><p>  // get items from children</p><p>  this.reloadItems();</p><p>  // elements that affect layout, but are not laid out</p><p>  this.stamps = [];</p><p>  this.stamp( this.options.stamp );</p><p>  // set container style</p><p>  extend( this.element.style, this.options.containerStyle );</p><p>  // bind resize method</p><p>  if ( this.options.isResizeBound ) {</p><p>    this.bindResize();</p><p>  }</p><p>};</p><p>// goes through all children again and gets bricks in proper order</p><p>Outlayer.prototype.reloadItems = function() {</p><p>  // collection of item elements</p><p>  this.items = this._itemize( this.element.children );</p><p>};</p><p>/**</p><p> * turn elements into Outlayer.Items to be used in layout</p><p> * @param {Array or NodeList or HTMLElement} elems</p><p> * @returns {Array} items - collection of new Outlayer Items</p><p> */</p><p>Outlayer.prototype._itemize = function( elems ) {</p><p>  var itemElems = this._filterFindItemElements( elems );</p><p>  var Item = this.constructor.Item;</p><p>  // create new Outlayer Items for collection</p><p>  var items = [];</p><p>  for ( var i=0, len = itemElems.length; i &lt; len; i++ ) {</p><p>    var elem = itemElems[i];</p><p>    var item = new Item( elem, this );</p><p>    items.push( item );</p><p>  }</p><p>  return items;</p><p>};</p><p>/**</p><p> * get item elements to be used in layout</p><p> * @param {Array or NodeList or HTMLElement} elems</p><p> * @returns {Array} items - item elements</p><p> */</p><p>Outlayer.prototype._filterFindItemElements = function( elems ) {</p><p>  // make array of elems</p><p>  elems = makeArray( elems );</p><p>  var itemSelector = this.options.itemSelector;</p><p>  var itemElems = [];</p><p>  for ( var i=0, len = elems.length; i &lt; len; i++ ) {</p><p>    var elem = elems[i];</p><p>    // check that elem is an actual element</p><p>    if ( !isElement( elem ) ) {</p><p>      continue;</p><p>    }</p><p>    // filter &amp; find items if we have an item selector</p><p>    if ( itemSelector ) {</p><p>      // filter siblings</p><p>      if ( matchesSelector( elem, itemSelector ) ) {</p><p>        itemElems.push( elem );</p><p>      }</p><p>      // find children</p><p>      var childElems = elem.querySelectorAll( itemSelector );</p><p>      // concat childElems to filterFound array</p><p>      for ( var j=0, jLen = childElems.length; j &lt; jLen; j++ ) {</p><p>        itemElems.push( childElems[j] );</p><p>      }</p><p>    } else {</p><p>      itemElems.push( elem );</p><p>    }</p><p>  }</p><p>  return itemElems;</p><p>};</p><p>/**</p><p> * getter method for getting item elements</p><p> * @returns {Array} elems - collection of item elements</p><p> */</p><p>Outlayer.prototype.getItemElements = function() {</p><p>  var elems = [];</p><p>  for ( var i=0, len = this.items.length; i &lt; len; i++ ) {</p><p>    elems.push( this.items[i].element );</p><p>  }</p><p>  return elems;</p><p>};</p><p>// ----- init &amp; layout ----- //</p><p>/**</p><p> * lays out all items</p><p> */</p><p>Outlayer.prototype.layout = function() {</p><p>  this._resetLayout();</p><p>  this._manageStamps();</p><p>  // don't animate first layout</p><p>  var isInstant = this.options.isLayoutInstant !== undefined ?</p><p>    this.options.isLayoutInstant : !this._isLayoutInited;</p><p>  this.layoutItems( this.items, isInstant );</p><p>  // flag for initalized</p><p>  this._isLayoutInited = true;</p><p>};</p><p>// _init is alias for layout</p><p>Outlayer.prototype._init = Outlayer.prototype.layout;</p><p>/**</p><p> * logic before any new layout</p><p> */</p><p>Outlayer.prototype._resetLayout = function() {</p><p>  this.getSize();</p><p>};</p><p>Outlayer.prototype.getSize = function() {</p><p>  this.size = getSize( this.element );</p><p>};</p><p>/**</p><p> * get measurement from option, for columnWidth, rowHeight, gutter</p><p> * if option is String -&gt; get element from selector string, &amp; get size of element</p><p> * if option is Element -&gt; get size of element</p><p> * else use option as a number</p><p> *</p><p> * @param {String} measurement</p><p> * @param {String} size - width or height</p><p> * @private</p><p> */</p><p>Outlayer.prototype._getMeasurement = function( measurement, size ) {</p><p>  var option = this.options[ measurement ];</p><p>  var elem;</p><p>  if ( !option ) {</p><p>    // default to 0</p><p>    this[ measurement ] = 0;</p><p>  } else {</p><p>    // use option as an element</p><p>    if ( typeof option === 'string' ) {</p><p>      elem = this.element.querySelector( option );</p><p>    } else if ( isElement( option ) ) {</p><p>      elem = option;</p><p>    }</p><p>    // use size of element, if element</p><p>    this[ measurement ] = elem ? getSize( elem )[ size ] : option;</p><p>  }</p><p>};</p><p>/**</p><p> * layout a collection of item elements</p><p> * @api public</p><p> */</p><p>Outlayer.prototype.layoutItems = function( items, isInstant ) {</p><p>  items = this._getItemsForLayout( items );</p><p>  this._layoutItems( items, isInstant );</p><p>  this._postLayout();</p><p>};</p><p>/**</p><p> * get the items to be laid out</p><p> * you may want to skip over some items</p><p> * @param {Array} items</p><p> * @returns {Array} items</p><p> */</p><p>Outlayer.prototype._getItemsForLayout = function( items ) {</p><p>  var layoutItems = [];</p><p>  for ( var i=0, len = items.length; i &lt; len; i++ ) {</p><p>    var item = items[i];</p><p>    if ( !item.isIgnored ) {</p><p>      layoutItems.push( item );</p><p>    }</p><p>  }</p><p>  return layoutItems;</p><p>};</p><p>/**</p><p> * layout items</p><p> * @param {Array} items</p><p> * @param {Boolean} isInstant</p><p> */</p><p>Outlayer.prototype._layoutItems = function( items, isInstant ) {</p><p>  var _this = this;</p><p>  function onItemsLayout() {</p><p>    _this.emitEvent( 'layoutComplete', [ _this, items ] );</p><p>  }</p><p>  if ( !items || !items.length ) {</p><p>    // no items, emit event with empty array</p><p>    onItemsLayout();</p><p>    return;</p><p>  }</p><p>  // emit layoutComplete when done</p><p>  this._itemsOn( items, 'layout', onItemsLayout );</p><p>  var queue = [];</p><p>  for ( var i=0, len = items.length; i &lt; len; i++ ) {</p><p>    var item = items[i];</p><p>    // get x/y object from method</p><p>    var position = this._getItemLayoutPosition( item );</p><p>    // enqueue</p><p>    position.item = item;</p><p>    position.isInstant = isInstant || item.isLayoutInstant;</p><p>    queue.push( position );</p><p>  }</p><p>  this._processLayoutQueue( queue );</p><p>};</p><p>/**</p><p> * get item layout position</p><p> * @param {Outlayer.Item} item</p><p> * @returns {Object} x and y position</p><p> */</p><p>Outlayer.prototype._getItemLayoutPosition = function( /* item */ ) {</p><p>  return {</p><p>    x: 0,</p><p>    y: 0</p><p>  };</p><p>};</p><p>/**</p><p> * iterate over array and position each item</p><p> * Reason being - separating this logic prevents 'layout invalidation'</p><p> * thx @paul_irish</p><p> * @param {Array} queue</p><p> */</p><p>Outlayer.prototype._processLayoutQueue = function( queue ) {</p><p>  for ( var i=0, len = queue.length; i &lt; len; i++ ) {</p><p>    var obj = queue[i];</p><p>    this._positionItem( obj.item, obj.x, obj.y, obj.isInstant );</p><p>  }</p><p>};</p><p>/**</p><p> * Sets position of item in DOM</p><p> * @param {Outlayer.Item} item</p><p> * @param {Number} x - horizontal position</p><p> * @param {Number} y - vertical position</p><p> * @param {Boolean} isInstant - disables transitions</p><p> */</p><p>Outlayer.prototype._positionItem = function( item, x, y, isInstant ) {</p><p>  if ( isInstant ) {</p><p>    // if not transition, just set CSS</p><p>    item.goTo( x, y );</p><p>  } else {</p><p>    item.moveTo( x, y );</p><p>  }</p><p>};</p><p>/**</p><p> * Any logic you want to do after each layout,</p><p> * i.e. size the container</p><p> */</p><p>Outlayer.prototype._postLayout = function() {</p><p>  this.resizeContainer();</p><p>};</p><p>Outlayer.prototype.resizeContainer = function() {</p><p>  if ( !this.options.isResizingContainer ) {</p><p>    return;</p><p>  }</p><p>  var size = this._getContainerSize();</p><p>  if ( size ) {</p><p>    this._setContainerMeasure( size.width, true );</p><p>    this._setContainerMeasure( size.height, false );</p><p>  }</p><p>};</p><p>/**</p><p> * Sets width or height of container if returned</p><p> * @returns {Object} size</p><p> *   @param {Number} width</p><p> *   @param {Number} height</p><p> */</p><p>Outlayer.prototype._getContainerSize = noop;</p><p>/**</p><p> * @param {Number} measure - size of width or height</p><p> * @param {Boolean} isWidth</p><p> */</p><p>Outlayer.prototype._setContainerMeasure = function( measure, isWidth ) {</p><p>  if ( measure === undefined ) {</p><p>    return;</p><p>  }</p><p>  var elemSize = this.size;</p><p>  // add padding and border width if border box</p><p>  if ( elemSize.isBorderBox ) {</p><p>    measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight +</p><p>      elemSize.borderLeftWidth + elemSize.borderRightWidth :</p><p>      elemSize.paddingBottom + elemSize.paddingTop +</p><p>      elemSize.borderTopWidth + elemSize.borderBottomWidth;</p><p>  }</p><p>  measure = Math.max( measure, 0 );</p><p>  this.element.style[ isWidth ? 'width' : 'height' ] = measure + 'px';</p><p>};</p><p>/**</p><p> * trigger a callback for a collection of items events</p><p> * @param {Array} items - Outlayer.Items</p><p> * @param {String} eventName</p><p> * @param {Function} callback</p><p> */</p><p>Outlayer.prototype._itemsOn = function( items, eventName, callback ) {</p><p>  var doneCount = 0;</p><p>  var count = items.length;</p><p>  // event callback</p><p>  var _this = this;</p><p>  function tick() {</p><p>    doneCount++;</p><p>    if ( doneCount === count ) {</p><p>      callback.call( _this );</p><p>    }</p><p>    return true; // bind once</p><p>  }</p><p>  // bind callback</p><p>  for ( var i=0, len = items.length; i &lt; len; i++ ) {</p><p>    var item = items[i];</p><p>    item.on( eventName, tick );</p><p>  }</p><p>};</p><p>// -------------------------- ignore &amp; stamps -------------------------- //</p><p>/**</p><p> * keep item in collection, but do not lay it out</p><p> * ignored items do not get skipped in layout</p><p> * @param {Element} elem</p><p> */</p><p>Outlayer.prototype.ignore = function( elem ) {</p><p>  var item = this.getItem( elem );</p><p>  if ( item ) {</p><p>    item.isIgnored = true;</p><p>  }</p><p>};</p><p>/**</p><p> * return item to layout collection</p><p> * @param {Element} elem</p><p> */</p><p>Outlayer.prototype.unignore = function( elem ) {</p><p>  var item = this.getItem( elem );</p><p>  if ( item ) {</p><p>    delete item.isIgnored;</p><p>  }</p><p>};</p><p>/**</p><p> * adds elements to stamps</p><p> * @param {NodeList, Array, Element, or String} elems</p><p> */</p><p>Outlayer.prototype.stamp = function( elems ) {</p><p>  elems = this._find( elems );</p><p>  if ( !elems ) {</p><p>    return;</p><p>  }</p><p>  this.stamps = this.stamps.concat( elems );</p><p>  // ignore</p><p>  for ( var i=0, len = elems.length; i &lt; len; i++ ) {</p><p>    var elem = elems[i];</p><p>    this.ignore( elem );</p><p>  }</p><p>};</p><p>/**</p><p> * removes elements to stamps</p><p> * @param {NodeList, Array, or Element} elems</p><p> */</p><p>Outlayer.prototype.unstamp = function( elems ) {</p><p>  elems = this._find( elems );</p><p>  if ( !elems ){</p><p>    return;</p><p>  }</p><p>  for ( var i=0, len = elems.length; i &lt; len; i++ ) {</p><p>    var elem = elems[i];</p><p>    // filter out removed stamp elements</p><p>    removeFrom( elem, this.stamps );</p><p>    this.unignore( elem );</p><p>  }</p><p>};</p><p>/**</p><p> * finds child elements</p><p> * @param {NodeList, Array, Element, or String} elems</p><p> * @returns {Array} elems</p><p> */</p><p>Outlayer.prototype._find = function( elems ) {</p><p>  if ( !elems ) {</p><p>    return;</p><p>  }</p><p>  // if string, use argument as selector string</p><p>  if ( typeof elems === 'string' ) {</p><p>    elems = this.element.querySelectorAll( elems );</p><p>  }</p><p>  elems = makeArray( elems );</p><p>  return elems;</p><p>};</p><p>Outlayer.prototype._manageStamps = function() {</p><p>  if ( !this.stamps || !this.stamps.length ) {</p><p>    return;</p><p>  }</p><p>  this._getBoundingRect();</p><p>  for ( var i=0, len = this.stamps.length; i &lt; len; i++ ) {</p><p>    var stamp = this.stamps[i];</p><p>    this._manageStamp( stamp );</p><p>  }</p><p>};</p><p>// update boundingLeft / Top</p><p>Outlayer.prototype._getBoundingRect = function() {</p><p>  // get bounding rect for container element</p><p>  var boundingRect = this.element.getBoundingClientRect();</p><p>  var size = this.size;</p><p>  this._boundingRect = {</p><p>    left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,</p><p>    top: boundingRect.top + size.paddingTop + size.borderTopWidth,</p><p>    right: boundingRect.right - ( size.paddingRight + size.borderRightWidth ),</p><p>    bottom: boundingRect.bottom - ( size.paddingBottom + size.borderBottomWidth )</p><p>  };</p><p>};</p><p>/**</p><p> * @param {Element} stamp</p><p>**/</p><p>Outlayer.prototype._manageStamp = noop;</p><p>/**</p><p> * get x/y position of element relative to container element</p><p> * @param {Element} elem</p><p> * @returns {Object} offset - has left, top, right, bottom</p><p> */</p><p>Outlayer.prototype._getElementOffset = function( elem ) {</p><p>  var boundingRect = elem.getBoundingClientRect();</p><p>  var thisRect = this._boundingRect;</p><p>  var size = getSize( elem );</p><p>  var offset = {</p><p>    left: boundingRect.left - thisRect.left - size.marginLeft,</p><p>    top: boundingRect.top - thisRect.top - size.marginTop,</p><p>    right: thisRect.right - boundingRect.right - size.marginRight,</p><p>    bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom</p><p>  };</p><p>  return offset;</p><p>};</p><p>// -------------------------- resize -------------------------- //</p><p>// enable event handlers for listeners</p><p>// i.e. resize -&gt; onresize</p><p>Outlayer.prototype.handleEvent = function( event ) {</p><p>  var method = 'on' + event.type;</p><p>  if ( this[ method ] ) {</p><p>    this[ method ]( event );</p><p>  }</p><p>};</p><p>/**</p><p> * Bind layout to window resizing</p><p> */</p><p>Outlayer.prototype.bindResize = function() {</p><p>  // bind just one listener</p><p>  if ( this.isResizeBound ) {</p><p>    return;</p><p>  }</p><p>  eventie.bind( window, 'resize', this );</p><p>  this.isResizeBound = true;</p><p>};</p><p>/**</p><p> * Unbind layout to window resizing</p><p> */</p><p>Outlayer.prototype.unbindResize = function() {</p><p>  if ( this.isResizeBound ) {</p><p>    eventie.unbind( window, 'resize', this );</p><p>  }</p><p>  this.isResizeBound = false;</p><p>};</p><p>// original debounce by John Hann</p><p>// http://unscriptable.com/index.php/2009/03/20/debouncing-javascript-methods/</p><p>// this fires every resize</p><p>Outlayer.prototype.onresize = function() {</p><p>  if ( this.resizeTimeout ) {</p><p>    clearTimeout( this.resizeTimeout );</p><p>  }</p><p>  var _this = this;</p><p>  function delayed() {</p><p>    _this.resize();</p><p>    delete _this.resizeTimeout;</p><p>  }</p><p>  this.resizeTimeout = setTimeout( delayed, 100 );</p><p>};</p><p>// debounced, layout on resize</p><p>Outlayer.prototype.resize = function() {</p><p>  // don't trigger if size did not change</p><p>  // or if resize was unbound. See #9</p><p>  if ( !this.isResizeBound || !this.needsResizeLayout() ) {</p><p>    return;</p><p>  }</p><p>  this.layout();</p><p>};</p><p>/**</p><p> * check if layout is needed post layout</p><p> * @returns Boolean</p><p> */</p><p>Outlayer.prototype.needsResizeLayout = function() {</p><p>  var size = getSize( this.element );</p><p>  // check that this.size and size are there</p><p>  // IE8 triggers resize on body size change, so they might not be</p><p>  var hasSizes = this.size &amp;&amp; size;</p><p>  return hasSizes &amp;&amp; size.innerWidth !== this.size.innerWidth;</p><p>};</p><p>// -------------------------- methods -------------------------- //</p><p>/**</p><p> * add items to Outlayer instance</p><p> * @param {Array or NodeList or Element} elems</p><p> * @returns {Array} items - Outlayer.Items</p><p>**/</p><p>Outlayer.prototype.addItems = function( elems ) {</p><p>  var items = this._itemize( elems );</p><p>  // add items to collection</p><p>  if ( items.length ) {</p><p>    this.items = this.items.concat( items );</p><p>  }</p><p>  return items;</p><p>};</p><p>/**</p><p> * Layout newly-appended item elements</p><p> * @param {Array or NodeList or Element} elems</p><p> */</p><p>Outlayer.prototype.appended = function( elems ) {</p><p>  var items = this.addItems( elems );</p><p>  if ( !items.length ) {</p><p>    return;</p><p>  }</p><p>  // layout and reveal just the new items</p><p>  this.layoutItems( items, true );</p><p>  this.reveal( items );</p><p>};</p><p>/**</p><p> * Layout prepended elements</p><p> * @param {Array or NodeList or Element} elems</p><p> */</p><p>Outlayer.prototype.prepended = function( elems ) {</p><p>  var items = this._itemize( elems );</p><p>  if ( !items.length ) {</p><p>    return;</p><p>  }</p><p>  // add items to beginning of collection</p><p>  var previousItems = this.items.slice(0);</p><p>  this.items = items.concat( previousItems );</p><p>  // start new layout</p><p>  this._resetLayout();</p><p>  this._manageStamps();</p><p>  // layout new stuff without transition</p><p>  this.layoutItems( items, true );</p><p>  this.reveal( items );</p><p>  // layout previous items</p><p>  this.layoutItems( previousItems );</p><p>};</p><p>/**</p><p> * reveal a collection of items</p><p> * @param {Array of Outlayer.Items} items</p><p> */</p><p>Outlayer.prototype.reveal = function( items ) {</p><p>  var len = items &amp;&amp; items.length;</p><p>  if ( !len ) {</p><p>    return;</p><p>  }</p><p>  for ( var i=0; i &lt; len; i++ ) {</p><p>    var item = items[i];</p><p>    item.reveal();</p><p>  }</p><p>};</p><p>/**</p><p> * hide a collection of items</p><p> * @param {Array of Outlayer.Items} items</p><p> */</p><p>Outlayer.prototype.hide = function( items ) {</p><p>  var len = items &amp;&amp; items.length;</p><p>  if ( !len ) {</p><p>    return;</p><p>  }</p><p>  for ( var i=0; i &lt; len; i++ ) {</p><p>    var item = items[i];</p><p>    item.hide();</p><p>  }</p><p>};</p><p>/**</p><p> * get Outlayer.Item, given an Element</p><p> * @param {Element} elem</p><p> * @param {Function} callback</p><p> * @returns {Outlayer.Item} item</p><p> */</p><p>Outlayer.prototype.getItem = function( elem ) {</p><p>  // loop through items to get the one that matches</p><p>  for ( var i=0, len = this.items.length; i &lt; len; i++ ) {</p><p>    var item = this.items[i];</p><p>    if ( item.element === elem ) {</p><p>      // return item</p><p>      return item;</p><p>    }</p><p>  }</p><p>};</p><p>/**</p><p> * get collection of Outlayer.Items, given Elements</p><p> * @param {Array} elems</p><p> * @returns {Array} items - Outlayer.Items</p><p> */</p><p>Outlayer.prototype.getItems = function( elems ) {</p><p>  if ( !elems || !elems.length ) {</p><p>    return;</p><p>  }</p><p>  var items = [];</p><p>  for ( var i=0, len = elems.length; i &lt; len; i++ ) {</p><p>    var elem = elems[i];</p><p>    var item = this.getItem( elem );</p><p>    if ( item ) {</p><p>      items.push( item );</p><p>    }</p><p>  }</p><p>  return items;</p><p>};</p><p>/**</p><p> * remove element(s) from instance and DOM</p><p> * @param {Array or NodeList or Element} elems</p><p> */</p><p>Outlayer.prototype.remove = function( elems ) {</p><p>  elems = makeArray( elems );</p><p>  var removeItems = this.getItems( elems );</p><p>  // bail if no items to remove</p><p>  if ( !removeItems || !removeItems.length ) {</p><p>    return;</p><p>  }</p><p>  this._itemsOn( removeItems, 'remove', function() {</p><p>    this.emitEvent( 'removeComplete', [ this, removeItems ] );</p><p>  });</p><p>  for ( var i=0, len = removeItems.length; i &lt; len; i++ ) {</p><p>    var item = removeItems[i];</p><p>    item.remove();</p><p>    // remove item from collection</p><p>    removeFrom( item, this.items );</p><p>  }</p><p>};</p><p>// ----- destroy ----- //</p><p>// remove and disable Outlayer instance</p><p>Outlayer.prototype.destroy = function() {</p><p>  // clean up dynamic styles</p><p>  var style = this.element.style;</p><p>  style.height = '';</p><p>  style.position = '';</p><p>  style.width = '';</p><p>  // destroy items</p><p>  for ( var i=0, len = this.items.length; i &lt; len; i++ ) {</p><p>    var item = this.items[i];</p><p>    item.destroy();</p><p>  }</p><p>  this.unbindResize();</p><p>  delete this.element.outlayerGUID;</p><p>  // remove data for jQuery</p><p>  if ( jQuery ) {</p><p>    jQuery.removeData( this.element, this.constructor.namespace );</p><p>  }</p><p>};</p><p>// -------------------------- data -------------------------- //</p><p>/**</p><p> * get Outlayer instance from element</p><p> * @param {Element} elem</p><p> * @returns {Outlayer}</p><p> */</p><p>Outlayer.data = function( elem ) {</p><p>  var id = elem &amp;&amp; elem.outlayerGUID;</p><p>  return id &amp;&amp; instances[ id ];</p><p>};</p><p>// -------------------------- create Outlayer class -------------------------- //</p><p>/**</p><p> * create a layout class</p><p> * @param {String} namespace</p><p> */</p><p>Outlayer.create = function( namespace, options ) {</p><p>  // sub-class Outlayer</p><p>  function Layout() {</p><p>    Outlayer.apply( this, arguments );</p><p>  }</p><p>  // inherit Outlayer prototype, use Object.create if there</p><p>  if ( Object.create ) {</p><p>    Layout.prototype = Object.create( Outlayer.prototype );</p><p>  } else {</p><p>    extend( Layout.prototype, Outlayer.prototype );</p><p>  }</p><p>  // set contructor, used for namespace and Item</p><p>  Layout.prototype.constructor = Layout;</p><p>  Layout.defaults = extend( {}, Outlayer.defaults );</p><p>  // apply new options</p><p>  extend( Layout.defaults, options );</p><p>  // keep prototype.settings for backwards compatibility (Packery v1.2.0)</p><p>  Layout.prototype.settings = {};</p><p>  Layout.namespace = namespace;</p><p>  Layout.data = Outlayer.data;</p><p>  // sub-class Item</p><p>  Layout.Item = function LayoutItem() {</p><p>    Item.apply( this, arguments );</p><p>  };</p><p>  Layout.Item.prototype = new Item();</p><p>  // -------------------------- declarative -------------------------- //</p><p>  /**</p><p>   * allow user to initialize Outlayer via .js-namespace class</p><p>   * options are parsed from data-namespace-option attribute</p><p>   */</p><p>  docReady( function() {</p><p>    var dashedNamespace = toDashed( namespace );</p><p>    var elems = document.querySelectorAll( '.js-' + dashedNamespace );</p><p>    var dataAttr = 'data-' + dashedNamespace + '-options';</p><p>    for ( var i=0, len = elems.length; i &lt; len; i++ ) {</p><p>      var elem = elems[i];</p><p>      var attr = elem.getAttribute( dataAttr );</p><p>      var options;</p><p>      try {</p><p>        options = attr &amp;&amp; JSON.parse( attr );</p><p>      } catch ( error ) {</p><p>        // log error, do not initialize</p><p>        if ( console ) {</p><p>          console.error( 'Error parsing ' + dataAttr + ' on ' +</p><p>            elem.nodeName.toLowerCase() + ( elem.id ? '#' + elem.id : '' ) + ': ' +</p><p>            error );</p><p>        }</p><p>        continue;</p><p>      }</p><p>      // initialize</p><p>      var instance = new Layout( elem, options );</p><p>      // make available via $().data('layoutname')</p><p>      if ( jQuery ) {</p><p>        jQuery.data( elem, namespace, instance );</p><p>      }</p><p>    }</p><p>  });</p><p>  // -------------------------- jQuery bridge -------------------------- //</p><p>  // make into jQuery plugin</p><p>  if ( jQuery &amp;&amp; jQuery.bridget ) {</p><p>    jQuery.bridget( namespace, Layout );</p><p>  }</p><p>  return Layout;</p><p>};</p><p>// ----- fin ----- //</p><p>// back in global</p><p>Outlayer.Item = Item;</p><p>return Outlayer;</p><p>}</p><p>// -------------------------- transport -------------------------- //</p><p>if ( typeof define === 'function' &amp;&amp; define.amd ) {</p><p>  // AMD</p><p>  define( 'outlayer/outlayer',[</p><p>      'eventie/eventie',</p><p>      'doc-ready/doc-ready',</p><p>      'eventEmitter/EventEmitter',</p><p>      'get-size/get-size',</p><p>      'matches-selector/matches-selector',</p><p>      './item'</p><p>    ],</p><p>    outlayerDefinition );</p><p>} else {</p><p>  // browser global</p><p>  window.Outlayer = outlayerDefinition(</p><p>    window.eventie,</p><p>    window.docReady,</p><p>    window.EventEmitter,</p><p>    window.getSize,</p><p>    window.matchesSelector,</p><p>    window.Outlayer.Item</p><p>  );</p><p>}</p><p>})( window );</p><p>/*!</p><p> * Masonry v3.1.5</p><p> * Cascading grid layout library</p><p> * http://masonry.desandro.com</p><p> * MIT License</p><p> * by David DeSandro</p><p> */</p><p>( function( window ) {</p><p>// -------------------------- helpers -------------------------- //</p><p>var indexOf = Array.prototype.indexOf ?</p><p>  function( items, value ) {</p><p>    return items.indexOf( value );</p><p>  } :</p><p>  function ( items, value ) {</p><p>    for ( var i=0, len = items.length; i &lt; len; i++ ) {</p><p>      var item = items[i];</p><p>      if ( item === value ) {</p><p>        return i;</p><p>      }</p><p>    }</p><p>    return -1;</p><p>  };</p><p>// -------------------------- masonryDefinition -------------------------- //</p><p>// used for AMD definition and requires</p><p>function masonryDefinition( Outlayer, getSize ) {</p><p>  // create an Outlayer layout class</p><p>  var Masonry = Outlayer.create('masonry');</p><p>  Masonry.prototype._resetLayout = function() {</p><p>    this.getSize();</p><p>    this._getMeasurement( 'columnWidth', 'outerWidth' );</p><p>    this._getMeasurement( 'gutter', 'outerWidth' );</p><p>    this.measureColumns();</p><p>    // reset column Y</p><p>    var i = this.cols;</p><p>    this.colYs = [];</p><p>    while (i--) {</p><p>      this.colYs.push( 0 );</p><p>    }</p><p>    this.maxY = 0;</p><p>  };</p><p>  Masonry.prototype.measureColumns = function() {</p><p>    this.getContainerWidth();</p><p>    // if columnWidth is 0, default to outerWidth of first item</p><p>    if ( !this.columnWidth ) {</p><p>      var firstItem = this.items[0];</p><p>      var firstItemElem = firstItem &amp;&amp; firstItem.element;</p><p>      // columnWidth fall back to item of first element</p><p>      this.columnWidth = firstItemElem &amp;&amp; getSize( firstItemElem ).outerWidth ||</p><p>        // if first elem has no width, default to size of container</p><p>        this.containerWidth;</p><p>    }</p><p>    this.columnWidth += this.gutter;</p><p>    this.cols = Math.floor( ( this.containerWidth + this.gutter ) / this.columnWidth );</p><p>    this.cols = Math.max( this.cols, 1 );</p><p>  };</p><p>  Masonry.prototype.getContainerWidth = function() {</p><p>    // container is parent if fit width</p><p>    var container = this.options.isFitWidth ? this.element.parentNode : this.element;</p><p>    // check that this.size and size are there</p><p>    // IE8 triggers resize on body size change, so they might not be</p><p>    var size = getSize( container );</p><p>    this.containerWidth = size &amp;&amp; size.innerWidth;</p><p>  };</p><p>  Masonry.prototype._getItemLayoutPosition = function( item ) {</p><p>    item.getSize();</p><p>    // how many columns does this brick span</p><p>    var remainder = item.size.outerWidth % this.columnWidth;</p><p>    var mathMethod = remainder &amp;&amp; remainder &lt; 1 ? 'round' : 'ceil';</p><p>    // round if off by 1 pixel, otherwise use ceil</p><p>    var colSpan = Math[ mathMethod ]( item.size.outerWidth / this.columnWidth );</p><p>    colSpan = Math.min( colSpan, this.cols );</p><p>    var colGroup = this._getColGroup( colSpan );</p><p>    // get the minimum Y value from the columns</p><p>    var minimumY = Math.min.apply( Math, colGroup );</p><p>    var shortColIndex = indexOf( colGroup, minimumY );</p><p>    // position the brick</p><p>    var position = {</p><p>      x: this.columnWidth * shortColIndex,</p><p>      y: minimumY</p><p>    };</p><p>    // apply setHeight to necessary columns</p><p>    var setHeight = minimumY + item.size.outerHeight;</p><p>    var setSpan = this.cols + 1 - colGroup.length;</p><p>    for ( var i = 0; i &lt; setSpan; i++ ) {</p><p>      this.colYs[ shortColIndex + i ] = setHeight;</p><p>    }</p><p>    return position;</p><p>  };</p><p>  /**</p><p>   * @param {Number} colSpan - number of columns the element spans</p><p>   * @returns {Array} colGroup</p><p>   */</p><p>  Masonry.prototype._getColGroup = function( colSpan ) {</p><p>    if ( colSpan &lt; 2 ) {</p><p>      // if brick spans only one column, use all the column Ys</p><p>      return this.colYs;</p><p>    }</p><p>    var colGroup = [];</p><p>    // how many different places could this brick fit horizontally</p><p>    var groupCount = this.cols + 1 - colSpan;</p><p>    // for each group potential horizontal position</p><p>    for ( var i = 0; i &lt; groupCount; i++ ) {</p><p>      // make an array of colY values for that one group</p><p>      var groupColYs = this.colYs.slice( i, i + colSpan );</p><p>      // and get the max value of the array</p><p>      colGroup[i] = Math.max.apply( Math, groupColYs );</p><p>    }</p><p>    return colGroup;</p><p>  };</p><p>  Masonry.prototype._manageStamp = function( stamp ) {</p><p>    var stampSize = getSize( stamp );</p><p>    var offset = this._getElementOffset( stamp );</p><p>    // get the columns that this stamp affects</p><p>    var firstX = this.options.isOriginLeft ? offset.left : offset.right;</p><p>    var lastX = firstX + stampSize.outerWidth;</p><p>    var firstCol = Math.floor( firstX / this.columnWidth );</p><p>    firstCol = Math.max( 0, firstCol );</p><p>    var lastCol = Math.floor( lastX / this.columnWidth );</p><p>    // lastCol should not go over if multiple of columnWidth #425</p><p>    lastCol -= lastX % this.columnWidth ? 0 : 1;</p><p>    lastCol = Math.min( this.cols - 1, lastCol );</p><p>    // set colYs to bottom of the stamp</p><p>    var stampMaxY = ( this.options.isOriginTop ? offset.top : offset.bottom ) +</p><p>      stampSize.outerHeight;</p><p>    for ( var i = firstCol; i &lt;= lastCol; i++ ) {</p><p>      this.colYs[i] = Math.max( stampMaxY, this.colYs[i] );</p><p>    }</p><p>  };</p><p>  Masonry.prototype._getContainerSize = function() {</p><p>    this.maxY = Math.max.apply( Math, this.colYs );</p><p>    var size = {</p><p>      height: this.maxY</p><p>    };</p><p>    if ( this.options.isFitWidth ) {</p><p>      size.width = this._getContainerFitWidth();</p><p>    }</p><p>    return size;</p><p>  };</p><p>  Masonry.prototype._getContainerFitWidth = function() {</p><p>    var unusedCols = 0;</p><p>    // count unused columns</p><p>    var i = this.cols;</p><p>    while ( --i ) {</p><p>      if ( this.colYs[i] !== 0 ) {</p><p>        break;</p><p>      }</p><p>      unusedCols++;</p><p>    }</p><p>    // fit container to columns that have been used</p><p>    return ( this.cols - unusedCols ) * this.columnWidth - this.gutter;</p><p>  };</p><p>  Masonry.prototype.needsResizeLayout = function() {</p><p>    var previousWidth = this.containerWidth;</p><p>    this.getContainerWidth();</p><p>    return previousWidth !== this.containerWidth;</p><p>  };</p><p>  return Masonry;</p><p>}</p><p>// -------------------------- transport -------------------------- //</p><p>if ( typeof define === 'function' &amp;&amp; define.amd ) {</p><p>  // AMD</p><p>  define( [</p><p>      'outlayer/outlayer',</p><p>      'get-size/get-size'</p><p>    ],</p><p>    masonryDefinition );</p><p>} else {</p><p>  // browser global</p><p>  window.Masonry = masonryDefinition(</p><p>    window.Outlayer,</p><p>    window.getSize</p><p>  );</p><p>}</p><p>})( window );</p></div></code>
<ieExpression></ieExpression>
<include>
</include>
<dataUrl></dataUrl>
</CMJavaScript>
